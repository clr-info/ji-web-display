// Copyright Â©2016 The ji-web-display Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"io/ioutil"

	"github.com/clr-info/ji-web-display/indico"
)

func loadCachedTable(evtid int) (*indico.TimeTable, error) {
	tbl := &indico.TimeTable{
		ID: evtid,
	}

	r := base64.NewDecoder(base64.StdEncoding, bytes.NewReader([]byte(defaultTable)))
	buf, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(buf, tbl)
	if err != nil {
		return nil, err
	}
	return tbl, nil
}

const defaultTable = `{
    "count": 1,
    "additionalInfo": {},
    "_type": "HTTPAPIResult",
    "complete": true,
    "url": "https:\/\/indico.in2p3.fr\/export\/timetable\/12779.json?pretty=yes",
    "ts": 1473337255,
    "results": {
        "12779": {
            "20160928": {
                "b16": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "14:00:00"
                    },
                    "description": "",
                    "title": "Repas",
                    "color": "#4F144E",
                    "id": "b16",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 90,
                    "sessionCode": null,
                    "textColor": "#FFEFFF",
                    "entryType": "Break",
                    "room": ""
                },
                "s16l0": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "17:50:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "18:40:00"
                    },
                    "color": "#EEE0EF",
                    "conferenceId": "12779",
                    "slotTitle": "3",
                    "duration": 50,
                    "id": "s16l0",
                    "inheritRoom": true,
                    "title": "Eclair",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s16",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#1D041F",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 5,
                    "entries": {
                        "s16c27": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:05:00"
                            },
                            "description": "Le centre scientifique fran\u00e7ais de la mission Svom devra g\u00e9rer de nombreuses connexions venant d'utilisateurs aux statuts vari\u00e9s. Il sera essentiel d'identifier ces utilisateurs de fa\u00e7on simple mais s\u00fbre puis de leur conf\u00e9rer les acc\u00e8s auquels ils pourront avoir droit. Pour cela le protocole Oauth2 semble bien adapt\u00e9. Nous l'avons test\u00e9 sur des prototypes et nous pr\u00e9senterons nos premi\u00e8res conclusions.",
                            "title": "Test d'Oauth2 pour authentifier des connexions",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/27",
                            "id": "s16c27",
                            "contributionId": "27",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Jean-Paul LE F\u00c8VRE",
                                    "firstName": "Jean-Paul",
                                    "familyName": "Le F\u00e8vre",
                                    "affiliation": "CEA Irfu",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "jean-paul.lefevre@cea.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t27",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=27&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c21": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:15:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:20:00"
                            },
                            "description": "Utentomatic est une application web d\u00e9velopp\u00e9e au sein du Laboratoire de l'Acc\u00e9l\u00e9rateur Lin\u00e9aire permettant la cr\u00e9ation de comptes Active Directory avec des attributs Unix.\r\nHistoriquement les utilisateurs du LAL avaient un compte Windows sous Active Directory et un compte Unix sous NIS. Il a \u00e9t\u00e9 d\u00e9cid\u00e9 de g\u00e9rer l\u2019ensemble des comptes sur Active Directory et d\u2019abandonner NIS. Les comptes Windows ont maintenant des attributs Unix qui sont utilis\u00e9s par les services Unix (mail, acc\u00e8s r\u00e9pertoires, session interactive...) pour authentifier les utilisateurs. Il fallait donc pouvoir g\u00e9n\u00e9rer les bons attributs Unix \u00e0 un nouvel utilisateur, et c'est la raison principale du d\u00e9veloppement d\u2019Utentomatic.\r\nElle est construite \u00e0 partir du Framework Django en Python 2, jQuery, Bootstrap et Jinja.\r\nAujourd'hui elle est capable de cr\u00e9er un utilisateur avec attributs Windows et Unix, cr\u00e9er un r\u00e9pertoire personnel sur un serveur Unix, cr\u00e9er un compte mail et envoyer un mail lorsque le compte est cr\u00e9\u00e9.\r\nL'application permet \u00e9galement de visualiser des informations de l'ensemble des comptes  et d'en modifier les plus utilis\u00e9es (date d\u2019expiration, \u2026)\r\nNous avons r\u00e9cemment ajout\u00e9 la possibilit\u00e9 de cr\u00e9er et visualiser des groupes, ainsi qu'ajouter\/supprimer un utilisateur d'un groupe.\r\nUtentomatic a \u00e9t\u00e9 con\u00e7ue pour \u00eatre le plus g\u00e9n\u00e9ral possible, afin d\u2019\u00eatre compatible sur diff\u00e9rente infrastructure, travail toujours en cours. Elle n\u2019as pas vocation \u00e0 remplacer les outils Windows\/Active Directory de gestion des comptes, mais permet de simplifier la gestion des comptes (point d\u2019entr\u00e9e unique pour cr\u00e9er un compte).",
                            "title": "UTENTOMATIC: la Gestion des comptes Unix sous Active Directory",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/21",
                            "id": "s16c21",
                            "contributionId": "21",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. G\u00e9rard MARCHAL-DUVAL",
                                    "firstName": "G\u00e9rard",
                                    "familyName": "Marchal-Duval",
                                    "affiliation": "LAL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "marchal@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t21",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=21&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c20": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:15:00"
                            },
                            "description": "Comment am\u00e9liorer la disponibilit\u00e9 et la fiabilit\u00e9 de vos services en utilisant Keepalived.",
                            "title": "Load Balancing avec Keepalived",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/20",
                            "id": "s16c20",
                            "contributionId": "20",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Fran\u00e7ois LEGRAND",
                                    "firstName": "Fran\u00e7ois",
                                    "familyName": "Legrand",
                                    "affiliation": "Lpnhe",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "fleg@lpnhe.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t20",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=20&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c62": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "17:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "17:55:00"
                            },
                            "description": "Pr\u00e9sentation et retour d\u2019exp\u00e9rience sur une solution de r\u00e9seaux priv\u00e9s virtuels orient\u00e9e Windows :\r\n\r\n- VPNReconnect",
                            "title": "VPN au LPC Caen",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/62",
                            "id": "s16c62",
                            "contributionId": "62",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. david ZWOLINSKI",
                                    "firstName": "david",
                                    "familyName": "zwolinski",
                                    "affiliation": "cnrs",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "zwolinski@lpccaen.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t62",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=62&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c69": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "17:55:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:00:00"
                            },
                            "description": "Afin de r\u00e9pondre \u00e0 certaines difficult\u00e9s rencontr\u00e9es par les utilisateurs nomades, nous avons mis en place un acc\u00e8s par VPN aux diff\u00e9rentes ressources informatiques du laboratoire. Je vous propose de vous pr\u00e9senter l'architecture mise en oeuvre bas\u00e9e sur OpenVPN et Docker ainsi que les questions et les r\u00e9ponses apport\u00e9es concernant la s\u00e9curisation de ce type de service.",
                            "title": "Le VPN au LPNHE",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/69",
                            "id": "s16c69",
                            "contributionId": "69",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Thomas AUDO",
                                    "firstName": "Thomas",
                                    "familyName": "Audo",
                                    "affiliation": "LPNHE",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "audo@lpnhe.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t69",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=69&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c40": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:25:00"
                            },
                            "description": "Apr\u00e8s plus de 20 ans de fonctionnement avec des \u00e9quipements de marque Cisco, le r\u00e9seau de l\u2019IPHC a \u00e9t\u00e9 renouvel\u00e9 en 2015 avec du mat\u00e9riel de marque Juniper. Un bref aper\u00e7u de JunOS le syst\u00e8me d\u2019exploitation, sa structure et son langage. Un bilan apr\u00e8s un an de fonctionnement.",
                            "title": "Equipements r\u00e9seaux Juniper",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/40",
                            "id": "s16c40",
                            "contributionId": "40",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Nicolas RUDOLF",
                                    "firstName": "Nicolas",
                                    "familyName": "RUDOLF",
                                    "affiliation": "IPHC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "nicolas.rudolf@ires.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t40",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=40&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c46": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:05:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:10:00"
                            },
                            "description": "Le cluster de calcul IMNC est utilis\u00e9 par les chercheurs et ing\u00e9nieurs du laboratoire pour la simulation num\u00e9rique de syst\u00e8mes et d'exp\u00e9riences d\u2019imagerie m\u00e9dicale et de radioth\u00e9rapie. Les n\u0153uds de calcul sont compos\u00e9s d'un ensemble de machines h\u00e9t\u00e9rog\u00e8nes comportant au total plus de 700 c\u0153urs CPU. Toutes les machines sont aujourd\u2019hui h\u00e9berg\u00e9es dans la salle mutualis\u00e9e de Virtual Data et connect\u00e9es par un r\u00e9seau Gigabit Ethernet (GbE). Nous avons r\u00e9cemment r\u00e9alis\u00e9 un important travail d'optimisation de l\u2019infrastructure de ce cluster gr\u00e2ce au r\u00e9glage des param\u00e8tres du gestionnaire de t\u00e2ches HTCondor. Dans cette pr\u00e9sentation, nous d\u00e9crirons plus particuli\u00e8rement la configuration de l\u2019interface utilisateur, la gestion des priorit\u00e9s entre les diff\u00e9rentes t\u00e2ches et les diff\u00e9rents utilisateurs, la mise d\u2019une ou plusieurs queues d\u2019ex\u00e9cution et le transfert automatique des fichiers sp\u00e9cifi\u00e9s par l\u2019utilisateur.",
                            "title": "Optimisation de l'infrastructure du cluster de calcul IMNC avec HTCondor",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/46",
                            "id": "s16c46",
                            "contributionId": "46",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mrs. Albertine DUBOIS",
                                    "firstName": "Albertine",
                                    "familyName": "DUBOIS",
                                    "affiliation": "IMNC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "dubois@imnc.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t46",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=46&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "16",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=16&slotId=0"
                },
                "s1l1": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "08:30:00"
                    },
                    "sessionSlotId": "1",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "10:30:00"
                    },
                    "color": "#92b6db",
                    "conferenceId": "12779",
                    "slotTitle": "2",
                    "duration": 120,
                    "id": "s1l1",
                    "inheritRoom": false,
                    "title": "ASR",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s1",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#03070F",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s1c7": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "10:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "10:30:00"
                            },
                            "description": "Parcours de quelques outils et solutions \u00e9tudi\u00e9es par l'IRFU et par le CEA pour permettre une configuration de Windows 10 conforme aux r\u00e8gles d'utilisation de l'IRFU et du CEA.\r\n\r\nEn particulier, le CEA exige que les applications tuiles soient  g\u00e9r\u00e9es (certaines interdites, certaines pr\u00e9install\u00e9es et mises \u00e0 jour r\u00e9guli\u00e8rement, d'autres propos\u00e9es) sans utilisation d'un compte Microsoft personnel. Nous \u00e9tudions donc le produit \"Microsoft store for entreprise\" et son int\u00e9gration avec SCCM.\r\n\r\nL'obligation de chiffrer (bitlocker) les portables, les r\u00e8gles de s\u00e9curit\u00e9s (GPO, comptes locaux...) doivent \u00eatre re-\u00e9tudi\u00e9 pour Windows 10.\r\n\r\nTous les param\u00e8tres de confidentialit\u00e9 de Microsoft doivent aussi \u00eatre \u00e9tudi\u00e9s et configur\u00e9s un par un.",
                            "title": "Windows 10: Configuration entreprise",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/7",
                            "id": "s1c7",
                            "contributionId": "7",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. joel SURGET",
                                    "firstName": "joel",
                                    "familyName": "surget",
                                    "affiliation": "CEA\/Saclay IRFU",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "joel.surget@cea.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t7",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=7&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c70": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "09:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "10:10:00"
                            },
                            "description": "Aujourd\u2019hui, plusieurs communaut\u00e9s scientifiques ont besoin des calculs de plus en plus intensifs et des grandes quantit\u00e9s de ressources informatiques pour g\u00e9rer leurs donn\u00e9es. Pour r\u00e9pondre \u00e0 ces besoins de diverses ressources informatiques distribu\u00e9es g\u00e9ographiquement et appartenant \u00e0 diff\u00e9rentes infrastructures informatiques peuvent \u00eatre exploit\u00e9es.  L\u2019utilisation de ces ressources par une agr\u00e9gation transparente pour les utilisateurs est un d\u00e9fi, en particulier pour les petites communaut\u00e9s scientifiques.\r\n\r\nLe projet DIRAC fournit un cadre pour la construction de syst\u00e8mes de calcul distribu\u00e9 avec un acc\u00e8s facile aux r\u00e9seaux, les nuages, les clusters de calcul et les r\u00e9seaux de b\u00e9n\u00e9voles. Il est maintenant utilis\u00e9 par plusieurs des exp\u00e9riences de physiques de haute \u00e9nergie et l'astrophysique dans le monde.\r\n\r\nDepuis 2012, la premi\u00e8re instance multi-VO de DIRAC a \u00e9t\u00e9 d\u00e9ploy\u00e9e en France,  coordonn\u00e9e par France Grille et h\u00e9berge au Centre de Calcul de l\u2019IN2P3. Cette instance a aussi la particularit\u00e9 de que la administration et surveillance est fait par une \u00e9quipe multidisciplinaire distribu\u00e9e entre 6 laboratoires partenaires. \r\n\r\nNous pr\u00e9sentons dans cette contribution la description du service DIRAC pour France Grille, l\u2019ouverture progressive \u00e0 diff\u00e9rentes communaut\u00e9s,  ainsi que l\u2019exp\u00e9rience op\u00e9rationnelle.",
                            "title": "Service France Grille DIRAC",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/70",
                            "id": "s1c70",
                            "contributionId": "70",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Vanessa HAMAR",
                                    "firstName": "Vanessa",
                                    "familyName": "Hamar",
                                    "affiliation": "CC - IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "hamar@cc.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t70",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=70&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c68": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "09:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "09:50:00"
                            },
                            "description": "Le GIS [France Grilles][1], initialement focalis\u00e9 sur les grilles de calcul et de stockage, propose d\u00e9sormais une offre de services bas\u00e9e sur le [\u00ab Cloud Computing \u00bb IaaS][2].\r\n\r\nIl s'agit, au travers de l'int\u00e9gration des derni\u00e8res avanc\u00e9es technologiques, de proposer un service r\u00e9pondant aux \u00e9volutions des besoins de traitement des donn\u00e9es scientifiques, notamment en terme d'\u00e9lasticit\u00e9 et de flexibilit\u00e9.\r\n\r\nFrance Grilles a donc d\u00e9velopp\u00e9, toujours sur le principe de partage et de mutualisation d'expertise, une f\u00e9d\u00e9ration de Clouds IaaS, rassemblant des ressources (calcul, stockage, r\u00e9seau et humaines) fournies librement par les diff\u00e9rents sites participants en leur imposant le minimum de contraintes.\r\n\r\nEn premi\u00e8re partie, nous pr\u00e9senterons les caract\u00e9ristiques de l'infrastructure :\r\n\r\n- les sites et le r\u00e9seau humain \u00e0 la base de l'infrastructure\r\n- les technologies utilis\u00e9es\r\n- les services en production\r\n- l'accueil de nouveaux sites participants\r\n- l'int\u00e9gration \u00e0 l'\u00e9chelle europ\u00e9enne et la certification EGI\r\n\r\nLa deuxi\u00e8me partie d\u00e9taillera quelques exemples d'utilisation de l'infrastructure, et en particulier les apprentissages que nous avons pu tirer du Cloud Challenge, test grandeur nature de l'infrastructure par un utilisateur expert.\r\n\r\nNous finirons par un rappel sur les modalit\u00e9s d'acc\u00e8s au [Cloud France Grilles][3] et les diff\u00e9rents services offerts aux utilisateurs :\r\n\r\n- Instanciation de clusters (calcul, stockage, r\u00e9seau) \u00e0 la demande\r\n- Accompagnement (formation, conseil, aide)\r\n- Documentation\r\n- D\u00e9veloppements (relatifs \u00e0 l'instanciation sur le Cloud)\r\n- Passerelle vers le Cloud f\u00e9d\u00e9r\u00e9 EGI\r\n\r\n\r\n  [1]: http:\/\/www.france-grilles.fr\r\n  [2]: https:\/\/fr.wikipedia.org\/wiki\/Infrastructure_as_a_service\r\n  [3]: http:\/\/www.france-grilles.fr\/catalogue-de-services\/fg-cloud\/",
                            "title": "FG-Cloud : Cloud acad\u00e9mique pour le calcul scientifique",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/68",
                            "id": "s1c68",
                            "contributionId": "68",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Nicolas CLEMENTIN",
                                    "firstName": "Nicolas",
                                    "familyName": "CLEMENTIN",
                                    "affiliation": "CNRS-LUPM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "nicolas.clementin@univ-montp2.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t68",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=68&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c43": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "09:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "09:30:00"
                            },
                            "description": "La pr\u00e9sentation abordera les diff\u00e9rentes utilisations du cloud au CC-IN2P3 (h\u00e9bergement, service, calcul...) et les d\u00e9fis techniques li\u00e9es.",
                            "title": "Status du cloud du CC",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/43",
                            "id": "s1c43",
                            "contributionId": "43",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Leslie-Alexandre DENIS",
                                    "firstName": "Leslie-Alexandre",
                                    "familyName": "DENIS",
                                    "affiliation": "CC-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "leslie-alexandre.denis@cc.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t43",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=43&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c39": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "08:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "09:10:00"
                            },
                            "description": "Le CC-IN2P3 a deux actualit\u00e9s marquantes cette ann\u00e9e en mati\u00e8re de calcul parall\u00e8le :\r\n\r\n - une nouvelle ferme HPC \r\n - une ferme \u00e9quip\u00e9e de GPU\r\n\r\nTour d'horizon de ces nouveaut\u00e9s : \u00e0 quoi ressemblent-elles, pourquoi et comment les utiliser ?",
                            "title": "GPU, HPC : nouveaut\u00e9s et calcul parall\u00e8le au CC-IN2P3",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/39",
                            "id": "s1c39",
                            "contributionId": "39",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Nicolas FOURNIALS",
                                    "firstName": "Nicolas",
                                    "familyName": "Fournials",
                                    "affiliation": "CC-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "nicolas.fournials@cc.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t39",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=39&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c41": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "08:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "08:50:00"
                            },
                            "description": "Avec le d\u00e9marrage de la grille de calcul en 2008, un syst\u00e8me d\u2019arr\u00eat automatique des serveurs a \u00e9t\u00e9 mise en place. Il bas\u00e9 sur un mode client-serveur dont le serveur est un DNS, que nous utilisons tous de mani\u00e8re plus traditionnelle tous les jours. Depuis l\u2019origine il permet un arr\u00eat automatique en cas d\u2019\u00e9ventuel probl\u00e8me de climatisation, en 2016 il int\u00e8grera \u00e9galement un volet \u00e9lectrique.",
                            "title": "Arr\u00eat automatique de serveurs bas\u00e9 sur un DNS",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/41",
                            "id": "s1c41",
                            "contributionId": "41",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Nicolas RUDOLF",
                                    "firstName": "Nicolas",
                                    "familyName": "RUDOLF",
                                    "affiliation": "IPHC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "nicolas.rudolf@ires.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t41",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=41&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/?slotId=1",
                    "isPoster": false,
                    "sessionId": "1",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=1&slotId=1"
                },
                "b20": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "20:00:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "22:00:00"
                    },
                    "description": "",
                    "title": "Repas",
                    "color": "#4F144E",
                    "id": "b20",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 120,
                    "sessionCode": null,
                    "textColor": "#FFEFFF",
                    "entryType": "Break",
                    "room": ""
                },
                "s11l0": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "16:00:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "17:20:00"
                    },
                    "color": "#0D316F",
                    "conferenceId": "12779",
                    "slotTitle": "1",
                    "duration": 80,
                    "id": "s11l0",
                    "inheritRoom": true,
                    "title": "Online",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s11",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#EFF5FF",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s11c67": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "16:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "16:20:00"
                            },
                            "description": "<p>Le standard OPC UA a \u00e9t\u00e9 pr\u00e9sent\u00e9 par Th. Le Flour en 2014, en tant que protocole standard dans le monde du SCADA. Nous nous proposons d'\u00e9lucider les aspects pratiques de son utilisation. Pour utiliser le protocole, un d\u00e9veloppeur fait bien d'utiliser une impl\u00e9mentation du protocole en forme de librairie, qui a \u00e9t\u00e9 valid\u00e9e par son fournisseur. D'une part, c'est un gage de qualit\u00e9, d'autre part on se passe de la charge d'une impl\u00e9mentation maison d'un protocole aussi complexe et complet OPC UA. \r\nOr, sa r\u00e9utilisation a un prix (de licence) souvent.<\/p>\r\n<p>\r\nCes derni\u00e8res ann\u00e9es ont vu appara\u00eetre d'une part des \"wrappers\" pour livrer une interface plus conviviale au d\u00e9veloppeur d'applications, bas\u00e9s sur des librairies commerciales, d'autre part des impl\u00e9mentations dont le code source est librement disponible, par exemple sur github. Le langage python joue un r\u00f4le important dans ces interfaces qui sont souvent test\u00e9es par des prototypes rapides. Nous pouvons donner un retour de nos exp\u00e9riences au sein de l'exp\u00e9rience CTA, ainsi qu'un rapport des migrations OPC (OLE) -> OPC UA dans certaines manips du LHC. (Elles ont toutes obligations de migrer \u00e0 terme ; certaines ont d\u00e9j\u00e0 fini le travail.) Eventuellement, il serait int\u00e9ressant d'inviter un expert du CERN sur le sujet.<\/p>\r\n<p>\r\nLe but de la pr\u00e9sentation est \u00e9galement un \u00e9change entre personnes qui ont fait l'exp\u00e9rience OPC UA et celles qui seraient int\u00e9ress\u00e9es ou pourraient proposer des alternatives ou comparaisons avec d'autres environnements et protocoles. La nouvelle \u00ab&nbsp;mode piscine&nbsp;\u00bb nous semble id\u00e9ale pour cela. Nous proposerons au moins un ou deux cours de piscine pour mettre la main \u00e0 la p\u00e2te avec ceux qui veulent.\r\n<\/p>",
                            "title": "Comparaison et retour d'exp\u00e9riences des impl\u00e9mentations OPC UA",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/contribution\/67",
                            "id": "s11c67",
                            "contributionId": "67",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Thierry LE FLOUR",
                                    "firstName": "Thierry",
                                    "familyName": "Le Flour",
                                    "affiliation": "LAPP",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "leflour@lapp.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Dirk HOFFMANN",
                                    "firstName": "Dirk",
                                    "familyName": "Hoffmann",
                                    "affiliation": "Centre de Physique des Particules de Marseille",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "hoffmann@cppm.in2p3.fr"
                                }
                            ],
                            "sessionId": "11",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t67",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=67&sessionId=11",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s11c8": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "17:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "17:20:00"
                            },
                            "description": "**Sous-titre : Comment la partition \u00e0 une \u00e9cole informatique IN2P3 peut contribuer \u00e0 l'am\u00e9lioration de la qualit\u00e9 des logiciels d\u00e9velopp\u00e9s dans nos laboratoires**\r\n\r\n\r\n**R\u00e9sum\u00e9** \r\n\r\nEn revenant de l'\u00e9cole informatique 2015 : \"Outils de mise en production du logiciel\", j'ai install\u00e9 sonarqube sur mon portable et j'ai soumis \u00e0 son analyse le code que j'\u00e9cris pour le changeur de filtres de la cam\u00e9ra de LSST.\r\n\r\nLe r\u00e9sultat a \u00e9t\u00e9 si instructif que j'ai convaincu nos collaborateurs am\u00e9ricains d'installer un serveur sonarqube, en plus des serveurs Jenkins et Nexus que nous avions d\u00e9j\u00e0. C'est maintenant la totalit\u00e9 du contr\u00f4le-commande de LSST qui passe sous les Fourches Caudines de sonarqube.\r\n\r\nDans cette pr\u00e9sentation, je d\u00e9crirais les **avantages de sonarqube**, les impacts positif de cet outil sur les habitudes de travail et l'adoption des bonnes pratiques de d\u00e9veloppement. Mais je d\u00e9crirai aussi les **limites de l'outil**. Notamment pour un code de contr\u00f4le-commande o\u00f9 l'\u00e9tape de tests avec le vrai mat\u00e9riel reste indispensable.",
                            "title": "Retour d'exp\u00e9rience avec sonarqube pour le contr\u00f4le-commande de la cam\u00e9ra du t\u00e9lescope LSST",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/contribution\/8",
                            "id": "s11c8",
                            "contributionId": "8",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mrs. Fran\u00e7oise VIRIEUX",
                                    "firstName": "Fran\u00e7oise",
                                    "familyName": "Virieux",
                                    "affiliation": "APC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "virieux@in2p3.fr"
                                }
                            ],
                            "sessionId": "11",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t8",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=8&sessionId=11",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s11c57": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "16:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "16:40:00"
                            },
                            "description": "Pr\u00e9sentation de l'interface graphique d\u00e9velopp\u00e9e \u00e0 l'aide de la biblioth\u00e8que Gtkada pour le contr\u00f4le et commande de l'\u00e9quipex Andromede (instrument pour l'analyse par spectrom\u00e9trie de masse) et des interfaces web utilisant le serveur AWS (Ada Web Server)  dans le cadre des projets Cocote et Gaspard (d\u00e9tecteurs).",
                            "title": "IHM pour contr\u00f6le\/commande, client lourd ou l\u00e9ger, la solution ADA",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/contribution\/57",
                            "id": "s11c57",
                            "contributionId": "57",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Jean Louis COACOLO",
                                    "firstName": "Jean Louis",
                                    "familyName": "Coacolo",
                                    "affiliation": "IPNO",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "coacolo@ipno.in2p3.fr"
                                }
                            ],
                            "sessionId": "11",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t57",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=57&sessionId=11",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s11c56": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "16:40:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "17:00:00"
                            },
                            "description": "`Go` est un langage de programmation relativement r\u00e9cent qui a pour substrat un code ADN qui facilite la programmation concurrente.\r\n\r\nDans cette pr\u00e9sentation, nous verrons comment ce langage peut \u00eatre utilis\u00e9 dans le cadre d'applications temps r\u00e9els (_soft_  _realtime_) comprenant plusieurs modules:\r\n\r\n- acquisition de donn\u00e9es provenant d'un bus syst\u00e8me ou d'un _socket_,\r\n- r\u00e9ception\/envoi de commandes depuis\/vers des variateurs et\r\n- pr\u00e9sentation et monitoring de donn\u00e9es en temps r\u00e9el mou (_soft_  _realtime_), en mode d\u00e9port\u00e9 ou local.\r\n\r\nNous pr\u00e9senterons les diff\u00e9rentes technologies utilis\u00e9es (`Go`, `Polymer\/JS`, `WebSockets`) et les performances obtenues dans quelques cas concrets:\r\n\r\n- contr\u00f4le commande du _testbench_ `LSST-LPC`,\r\n- DAQ d'`AVIRM-LPC`,\r\n- simulation de _supernovae_ pour `LSST`.",
                            "title": "Go & Polymer: slow control, monitoring & computing",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/contribution\/56",
                            "id": "s11c56",
                            "contributionId": "56",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Sebastien BINET",
                                    "firstName": "Sebastien",
                                    "familyName": "Binet",
                                    "affiliation": "LPC\/IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "sebastien.binet@cern.ch"
                                }
                            ],
                            "sessionId": "11",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t56",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=56&sessionId=11",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "11",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=11&slotId=0"
                },
                "s11l1": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "17:50:00"
                    },
                    "sessionSlotId": "1",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "18:50:00"
                    },
                    "color": "#0D316F",
                    "conferenceId": "12779",
                    "slotTitle": "2",
                    "duration": 60,
                    "id": "s11l1",
                    "inheritRoom": false,
                    "title": "Online",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s11",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#EFF5FF",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s11c66": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:50:00"
                            },
                            "description": "<p>Le projet NectarCAM, cam\u00e9ra pour l'exp\u00e9rience CTA (Chrenkov Telescope Array) n\u00e9cessite un syst\u00e8me d'acquisition de donn\u00e9es cons\u00e9quent permettant de sortir jusqu'\u00e0 20 Gbps de donn\u00e9es en flux continu apr\u00e8s d\u00e9randomisation, en utilisant le plus possible des technologies commerciales et bon march\u00e9. Les cam\u00e9ras avec leurs syst\u00e8me DAQ sont cens\u00e9es \u00e9quiper jusqu'\u00e0 15 t\u00e9lescopes d'un m\u00eame type (sur une cinquantaine par site). Les choix techniques dans l'\u00e9lectronique frontale (EF) imposent de collecter les donn\u00e9es \u00e9mises simultan\u00e9ment sur 300 prises RJ45 en protocole UDP, situation inhabituelle pour un r\u00e9seau commut\u00e9 dont les composants sont g\u00e9n\u00e9ralement con\u00e7us pour r\u00e9sister aux fort d\u00e9bits, mais moyenn\u00e9s dans le temps. Une \u00e9quipe au CPPM a d\u00e9velopp\u00e9 un syst\u00e8me qui a \u00e9t\u00e9 valid\u00e9 \u00e0 l'aide d'un stimulateur pour le syst\u00e8me DAQ, compos\u00e9 de 64 cartes CPU commerciales, chacune \u00e9quip\u00e9e de cinq ports RJ45 \u00e0 1Gbps et un processeur faible consommation. Ces r\u00e9sultats ont fait l'objet d'une pr\u00e9sentation aux JI14 et lors de la Journ\u00e9e Instrumentation en 2015 \u00e0 Jussieu. \r\n<\/p>\r\n<p>\r\nDepuis d\u00e9but 2016, l'Event-Builder de NectarCAM est op\u00e9rationnel sur un banc de test avec un nombre tr\u00e8s r\u00e9duit de cartes d'\u00e9lectronique frontale, allant tout de m\u00eame jusqu'au stockage des donn\u00e9es dans les catalogues DIRAC, en passant par une \u00e9criture locale sur disque, comme ce sera le cas dans l'exp\u00e9rience, une fois mont\u00e9e sur un site au Chili ou sur La Palma aux Canaries. Ainsi, nous avons eu le plaisir de pr\u00e9senter les premiers un syst\u00e8me DAQ complet et n'utilisant quasiment aucun outils auxiliare sp\u00e9cifique de la NectarCAM, mais plut\u00f4t des outils communs de et fourni par d'autres groupes du consortium CTA.\r\n<\/p>\r\n<p>\r\nLes analyses des donn\u00e9es et la mont\u00e9e en charge sont en cours.\r\nEn fonction des r\u00e9sultats, nous allons pr\u00e9ciser les points critiques ou faciles que nous avons rencontr\u00e9 avec cette panoplie d'\u00e9l\u00e9ments interfac\u00e9es.<\/p>",
                            "title": "D\u00e9veloppement du syst\u00e8me DAQ pour des cam\u00e9ras de l'exp\u00e9rience CTA",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/contribution\/66",
                            "id": "s11c66",
                            "contributionId": "66",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Dirk HOFFMANN",
                                    "firstName": "Dirk",
                                    "familyName": "Hoffmann",
                                    "affiliation": "Centre de Physique des Particules de Marseille",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "hoffmann@cppm.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "M. Julien HOULES",
                                    "firstName": "Julien",
                                    "familyName": "Houles",
                                    "affiliation": "Centre de Physique des Particules de Marseille",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "houles@cppm.in2p3.fr"
                                }
                            ],
                            "sessionId": "11",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t66",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=66&sessionId=11",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s11c61": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "17:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:10:00"
                            },
                            "description": "Le projet europ\u00e9en AIDA-2020 s'introduit dans la continuit\u00e9 du projet AIDA, d\u00e9di\u00e9 \u00e0 la recherche sur les d\u00e9tecteurs de physique des particules et technologies associ\u00e9es.\r\n\r\nUn important volet de ce projet, le Work Package 3, est consacr\u00e9 au d\u00e9veloppement logiciel pour la physique des particules: nouvelles biblioth\u00e8ques impl\u00e9mentant des repr\u00e9sentations de donn\u00e9es plus efficaces, mise \u00e0 niveau de frameworks existants pour les nouvelles architectures parall\u00e8les, alignement online de l'exp\u00e9rience LHCb...\r\n\r\nJe me propose donc de pr\u00e9senter les efforts soutenus dans le cadre de ce work package, et en particulier des mani\u00e8res dont l'IN2P3 y contribue.",
                            "title": "Activit\u00e9s europ\u00e9ennes pour la physique des hautes \u00e9nergies dans AIDA-2020 WP3",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/contribution\/61",
                            "id": "s11c61",
                            "contributionId": "61",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Hadrien GRASLAND",
                                    "firstName": "Hadrien",
                                    "familyName": "Grasland",
                                    "affiliation": "UMR 8607 - LAL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "grasland@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "11",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t61",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=61&sessionId=11",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s11c18": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "18:30:00"
                            },
                            "description": "Dans cet expos\u00e9 je me propose de d\u00e9crire l'\u00e9volution de l'architecture du syst\u00e8me d'acquisition due aux nouvelles sp\u00e9cifications qui lui impose d'acqu\u00e9rir la totalit\u00e9 des donn\u00e9es et de reconstruire les \u00e9v\u00e8nements \u00e0 la vitesse des collisions dans le d\u00e9tecteur. Tout filtrage interm\u00e9diaire disparait et la totalit\u00e9 des \u00e9v\u00e8nements est distribu\u00e9e \u00e0 une grande ferme de PC qui fait la s\u00e9lection et l'enregistrement des \u00e9v\u00e8nements retenus pour la physique.\r\n\r\nJ'exposerai la solution en cours de d\u00e9veloppement qui utilise la technologie PCIe et les outils d\u00e9velopp\u00e9s pour permettre \u00e0 chaque sous-d\u00e9tecteur de mettre au point ses fonctions d'acquisition dans le cadre global. J'expliciterais la part importante des contributions des laboratoires IN2P3 impliqu\u00e9s dans ce travail.",
                            "title": "Nouvelle acquisition pour LHCb avec reconstruction de tous les \u00e9v\u00e8nements en ligne \u00e0 30MHz sans filtre",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/contribution\/18",
                            "id": "s11c18",
                            "contributionId": "18",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Pierre-Yves DUVAL",
                                    "firstName": "Pierre-Yves",
                                    "familyName": "Duval",
                                    "affiliation": "CPPM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "duval@cppm.in2p3.fr"
                                }
                            ],
                            "sessionId": "11",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t18",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=18&sessionId=11",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/11\/?slotId=1",
                    "isPoster": false,
                    "sessionId": "11",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=11&slotId=1"
                },
                "s2l7": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "sessionSlotId": "7",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "7",
                    "duration": 90,
                    "id": "s2l7",
                    "inheritRoom": false,
                    "title": "Atelier",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s2",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s2c81": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "11:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "12:30:00"
                            },
                            "description": "Depuis Ada 83, le langage n'a cess\u00e9 d\u2019\u00e9voluer pour int\u00e9grer de nouveaux paradigmes (liste non exhaustive):\r\n\r\n - la programmation orient\u00e9e objet et la programmation distribu\u00e9e avec Ada 95\r\n - les interfaces en Ada 2005\r\n - la programmation par contrat en Ada 2012\r\n\r\nVenez d\u00e9couvrir la puissance d'un langage mature et norm\u00e9.",
                            "title": "Pourquoi pas Ada 2012 ?",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/contribution\/81",
                            "id": "s2c81",
                            "contributionId": "81",
                            "sessionSlotId": "7",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Xavier GRAVE",
                                    "firstName": "Xavier",
                                    "familyName": "Grave",
                                    "affiliation": "CSNSM-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "xavier.grave@csnsm.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Nicolas DOSME",
                                    "firstName": "Nicolas",
                                    "familyName": "DOSME",
                                    "affiliation": "CSNSM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "nicolas.dosme@csnsm.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Eric LEGAY",
                                    "firstName": "Eric",
                                    "familyName": "Legay",
                                    "affiliation": "CSNSM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "legay@csnsm.in2p3.fr"
                                }
                            ],
                            "sessionId": "2",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t81",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=81&sessionId=2",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/?slotId=7",
                    "isPoster": false,
                    "sessionId": "2",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=2&slotId=7"
                },
                "b13": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "10:30:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "description": "",
                    "title": "Pause",
                    "color": "#FFEC1F",
                    "id": "b13",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 30,
                    "sessionCode": null,
                    "textColor": "#1F1D04",
                    "entryType": "Break",
                    "room": ""
                },
                "s6l1": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "sessionSlotId": "1",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "color": "#6F390D",
                    "conferenceId": "12779",
                    "slotTitle": "2",
                    "duration": 90,
                    "id": "s6l1",
                    "inheritRoom": false,
                    "title": "Discussions",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s6",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#FFEDDF",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/6\/?slotId=1",
                    "isPoster": false,
                    "sessionId": "6",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=6&slotId=1"
                },
                "s10l0": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "14:00:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "16:00:00"
                    },
                    "color": "#1A3F14",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 120,
                    "id": "s10l0",
                    "inheritRoom": true,
                    "title": "Social event",
                    "location": "Activit\u00e9 ext\u00e9rieure",
                    "uniqueId": "a12779s10",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#F1FFEF",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/10\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "10",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=10&slotId=0"
                },
                "b18": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "17:20:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "17:50:00"
                    },
                    "description": "",
                    "title": "Pause",
                    "color": "#FFEC1F",
                    "id": "b18",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 30,
                    "sessionCode": null,
                    "textColor": "#1F1D04",
                    "entryType": "Break",
                    "room": ""
                },
                "s2l6": {
                    "startDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "sessionSlotId": "6",
                    "endDate": {
                        "date": "2016-09-28",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "6",
                    "duration": 90,
                    "id": "s2l6",
                    "inheritRoom": false,
                    "title": "Atelier",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s2",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s2c32": {
                            "startDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "11:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-28",
                                "tz": "Europe\/Paris",
                                "time": "12:30:00"
                            },
                            "description": "Cet Atelier presentera la technologie de virtualisation legere telle qu'implementee par `Docker`.\r\n\r\nNous verrons l'architecture globale des containers `docker` ainsi que leurs avantages et inconvenients par rapport aux machines virtuelles (`VM`s).\r\nLes participants pourront ensuite creer leur premier container pas-a-pas.\r\nTout d'abord en utilisant la methode interactive, puis _via_ les `Dockerfiles`.\r\nEnfin, nous verrons comment publier et partager des containers `docker` au moyen du `Hub`.",
                            "title": "Atelier Docker",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/contribution\/32",
                            "id": "s2c32",
                            "contributionId": "32",
                            "sessionSlotId": "6",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Sebastien BINET",
                                    "firstName": "Sebastien",
                                    "familyName": "Binet",
                                    "affiliation": "LPC\/IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "sebastien.binet@cern.ch"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Antoine P\u00c9RUS",
                                    "firstName": "Antoine",
                                    "familyName": "P\u00e9rus",
                                    "affiliation": "Cnrs\/In2p3\/Lal",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "perus@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "2",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t32",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=32&sessionId=2",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/?slotId=6",
                    "isPoster": false,
                    "sessionId": "2",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=2&slotId=6"
                }
            },
            "20160929": {
                "s17l2": {
                    "startDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "08:40:00"
                    },
                    "sessionSlotId": "2",
                    "endDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "10:00:00"
                    },
                    "color": "#DFDFDF",
                    "conferenceId": "12779",
                    "slotTitle": "3",
                    "duration": 80,
                    "id": "s17l2",
                    "inheritRoom": true,
                    "title": "Offline",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s17",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#151515",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s17c50": {
                            "startDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "09:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "09:40:00"
                            },
                            "description": "Description d\u00e9taill\u00e9e du projet \r\n - Choix d'un produit open-source\r\n - Design du sch\u00e9ma de donn\u00e9es\r\n - Impl\u00e9mentation sp\u00e9cifique pour le CC\r\n - Lavoisier au coeur du process\r\n - Limitations du produit choisi\r\n - Int\u00e9gration d'un base de donn\u00e9e orient\u00e9e Graphe\r\n - Interface WEB (graphe dynamique)",
                            "title": "CMDB du CC",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/50",
                            "id": "s17c50",
                            "contributionId": "50",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Sylvain REYNAUD",
                                    "firstName": "Sylvain",
                                    "familyName": "Reynaud",
                                    "affiliation": "CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "sreynaud@in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t50",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=50&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c48": {
                            "startDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "08:40:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "09:00:00"
                            },
                            "description": "L'\u00e9quipe \"Applications\" a r\u00e9alis\u00e9 dans les derni\u00e8res ann\u00e9es des applications web en PHP bas\u00e9 sur le framework Symfony.\r\nNous pr\u00e9senterons, l'historique et la mont\u00e9e en comp\u00e9tences sur le produit et comment nous g\u00e9rons les projets en mode agile avec int\u00e9gration continue.",
                            "title": "Les projets Web du CC",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/48",
                            "id": "s17c48",
                            "contributionId": "48",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Jean-Ren\u00e9 ROUET",
                                    "firstName": "Jean-Ren\u00e9",
                                    "familyName": "Rouet",
                                    "affiliation": "CC-IN2P3\/CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "rouet@in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t48",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=48&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c23": {
                            "startDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "09:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "09:20:00"
                            },
                            "description": "Le Large Synoptic Survey Telescope (LSST) va bouleverser l'astronomie. \u00c9quip\u00e9 du plus grand capteur photographique jamais con\u00e7u pour l'astronomie, ce t\u00e9lescope permettra de constituer le plus large et le plus profond relev\u00e9 de l'univers. D\u00e8s sa mise en exploitation en 2022, le traitement des donn\u00e9es produites par LSST n\u00e9cessitera des dizaines de milliers de processeurs et une capacit\u00e9 de stockage de donn\u00e9es en augmentation de plusieurs dizaines de p\u00e9taoctets chaque ann\u00e9e et ce pendant au moins une d\u00e9cennie.\r\n\r\nDes objets c\u00e9lestes et leurs propri\u00e9t\u00e9s physiques seront identifi\u00e9s et catalogu\u00e9s dans une base de donn\u00e9es qui sera compos\u00e9e \u00e0 terme de milliers de milliards d\u2019entr\u00e9es. D'un volume de l\u2019ordre de plusieurs dizaines de p\u00e9taoctets, ce catalogue jouera un r\u00f4le majeur dans l\u2019exploitation scientifique des donn\u00e9es produites par le t\u00e9lescope. Pour satisfaire ce besoin, un logiciel sp\u00e9cifique nomm\u00e9 Qserv est actuellement d\u00e9velopp\u00e9 par une \u00e9quipe majoritairement bas\u00e9e \u00e0 l'Universit\u00e9 de Stanford aux Etats Unis.\r\n\r\nCette pr\u00e9sentation d\u00e9crira l'architecture de Qserv, les d\u00e9fis auxquels il doit r\u00e9pondre, son \u00e9tat d\u2019avancement ainsi que les r\u00e9sultats de plusieurs campagnes des tests r\u00e9alis\u00e9es pendant les derni\u00e8res ann\u00e9es.\r\n\r\nLes contributeurs de cet expos\u00e9 font partie de l\u2019\u00e9quipe de d\u00e9veloppement de Qserv et de l\u2019\u00e9quipe op\u00e9rant l\u2019infrastructure de tests compos\u00e9e actuellement de 400 processeurs et 500 t\u00e9raoctets de stockage, localis\u00e9e au centre de calcul de l\u2019IN2P3 \/ CNRS.",
                            "title": "Analyse de PetaOctets de donn\u00e9es cosmiques pour LSST",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/23",
                            "id": "s17c23",
                            "contributionId": "23",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Fabrice JAMMES",
                                    "firstName": "Fabrice",
                                    "familyName": "Jammes",
                                    "affiliation": "CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "fabrice.jammes@clermont.in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t23",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=23&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c54": {
                            "startDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "09:40:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "10:00:00"
                            },
                            "description": "The ATLAS Metadata Interface (AMI) is a mature application of more than 15 years of existence. Mainly used by the ATLAS experiment at CERN, it consists of a very generic tool ecosystem for metadata aggregation and cataloguing. We briefly describe the architecture, the main services and the benefits of using AMI in big collaborations, especially for high energy physics. We focus on the recent improvements, for instance: the lightweight clients (Python, Javascript, C++), the new smart task server system and the Web 2.0 AMI framework for simplifying the development of metadata-oriented web interfaces.",
                            "title": "ATLAS Metadata Interface (AMI), a generic metadata framework",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/54",
                            "id": "s17c54",
                            "contributionId": "54",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. J\u00e9r\u00f4me ODIER",
                                    "firstName": "J\u00e9r\u00f4me",
                                    "familyName": "Odier",
                                    "affiliation": "LPSC\/IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "odier@lpsc.in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t54",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=54&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/?slotId=2",
                    "isPoster": false,
                    "sessionId": "17",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=17&slotId=2"
                },
                "s16l3": {
                    "startDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "10:00:00"
                    },
                    "sessionSlotId": "3",
                    "endDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "10:10:00"
                    },
                    "color": "#EEE0EF",
                    "conferenceId": "12779",
                    "slotTitle": "4",
                    "duration": 10,
                    "id": "s16l3",
                    "inheritRoom": false,
                    "title": "Eclair",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s16",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#1D041F",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 5,
                    "entries": {
                        "s16c36": {
                            "startDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "10:05:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "10:10:00"
                            },
                            "description": "Courte pr\u00e9sentation, au nom du RI3, des webinaires. Le but est de susciter une large participation, \u00e0 la fois pour pr\u00e9senter un webinaire et pour suivre ceux qui sont programm\u00e9s.",
                            "title": "Webinaires RI3: le retour!",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/36",
                            "id": "s16c36",
                            "contributionId": "36",
                            "sessionSlotId": "3",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Val\u00e9rie GIVAUDAN",
                                    "firstName": "Val\u00e9rie",
                                    "familyName": "Givaudan",
                                    "affiliation": "LAL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "givaudan@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t36",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=36&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c63": {
                            "startDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "10:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "10:05:00"
                            },
                            "description": "Br\u00e8ves sur les actions en cours et \u00e0 venir, compl\u00e9t\u00e9es par un poster plus complet de bilan et d'annonces et introduction aux nouveaux venus.",
                            "title": "Communication du RI3",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/63",
                            "id": "s16c63",
                            "contributionId": "63",
                            "sessionSlotId": "3",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Fr\u00e9d\u00e9rique CHOLLET",
                                    "firstName": "Fr\u00e9d\u00e9rique",
                                    "familyName": "Chollet",
                                    "affiliation": "LAPP-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "frederique.chollet@lapp.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t63",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=63&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/?slotId=3",
                    "isPoster": false,
                    "sessionId": "16",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=16&slotId=3"
                },
                "s14l0": {
                    "startDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "10:10:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "10:40:00"
                    },
                    "color": "#FFEC1F",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 30,
                    "id": "s14l0",
                    "inheritRoom": true,
                    "title": "Pause",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s14",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#1F1D04",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/14\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "14",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=14&slotId=0"
                },
                "s15l0": {
                    "startDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "11:40:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "12:10:00"
                    },
                    "color": "#8ec473",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 30,
                    "id": "s15l0",
                    "inheritRoom": true,
                    "title": "Cl\u00f4ture",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s15",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#021F03",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/15\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "15",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=15&slotId=0"
                },
                "s6l2": {
                    "startDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "10:40:00"
                    },
                    "sessionSlotId": "2",
                    "endDate": {
                        "date": "2016-09-29",
                        "tz": "Europe\/Paris",
                        "time": "11:40:00"
                    },
                    "color": "#6F390D",
                    "conferenceId": "12779",
                    "slotTitle": "Retour",
                    "duration": 60,
                    "id": "s6l2",
                    "inheritRoom": false,
                    "title": "Discussions",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s6",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#FFEDDF",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s6c74": {
                            "startDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "10:40:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-29",
                                "tz": "Europe\/Paris",
                                "time": "11:40:00"
                            },
                            "description": "Retour des groupes de discussion sous la forme d'une pr\u00e9sentation \u00e9clair par groupe.",
                            "title": "Retour des groupes de discussion",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/6\/contribution\/74",
                            "id": "s6c74",
                            "contributionId": "74",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Bernard BOUTHERIN",
                                    "firstName": "Bernard",
                                    "familyName": "Boutherin",
                                    "affiliation": "LPSC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "boutherin@lpsc.in2p3.fr"
                                }
                            ],
                            "sessionId": "6",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t74",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=74&sessionId=6",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/6\/?slotId=2",
                    "isPoster": false,
                    "sessionId": "6",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=6&slotId=2"
                }
            },
            "20160926": {
                "s19l0": {
                    "startDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "15:15:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "15:20:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 5,
                    "id": "s19l0",
                    "inheritRoom": true,
                    "title": "Bienvenue",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s19",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/19\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "19",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=19&slotId=0"
                },
                "s0l0": {
                    "startDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "15:20:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "18:05:00"
                    },
                    "color": "#8ec473",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 165,
                    "id": "s0l0",
                    "inheritRoom": true,
                    "title": "Ouverture",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s0",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#021F03",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 30,
                    "entries": {
                        "s0c72": {
                            "startDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "15:35:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "16:15:00"
                            },
                            "description": "Pr\u00e9sentation et discussions autour du changement de direction\r\net d'organisation r\u00e9cents mis en place.",
                            "title": "Vision de la direction IN2P3 sur l'informatique et le calcul",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/0\/contribution\/72",
                            "id": "s0c72",
                            "contributionId": "72",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. christian OLIVETTO",
                                    "firstName": "christian",
                                    "familyName": "olivetto",
                                    "affiliation": "CNRS\/IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "colivetto@admin.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Volker BECKMANN",
                                    "firstName": "Volker",
                                    "familyName": "Beckmann",
                                    "affiliation": "CNRS \/ IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "beckmann@apc.in2p3.fr"
                                }
                            ],
                            "sessionId": "0",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t72",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=72&sessionId=0",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s0c73": {
                            "startDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "17:05:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "18:05:00"
                            },
                            "description": "r\u00e9sum\u00e9 \u00e0 suivre (juillet-ao\u00fbt)",
                            "title": "Du \u2018calcul \u00e9lectronique\u2019 au \u2018calcul intensif\u2019: soixante ans d\u2019ordinateurs dans la recherche nucl\u00e9aire fran\u00e7aise",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/0\/contribution\/73",
                            "id": "s0c73",
                            "contributionId": "73",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Pierre MOUNIER-KUHN",
                                    "firstName": "Pierre",
                                    "familyName": "Mounier-Kuhn",
                                    "affiliation": "CNRS & Universit\u00e9 Paris - Sorbonne",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "mounier@msh-paris.fr"
                                }
                            ],
                            "sessionId": "0",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t73",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=73&sessionId=0",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s0c77": {
                            "startDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "16:15:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "16:45:00"
                            },
                            "description": "CCIN2P3 Enjeux, bilan et perspectives",
                            "title": "CCIN2P3 Enjeux, bilan et perspectives",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/0\/contribution\/77",
                            "id": "s0c77",
                            "contributionId": "77",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "M. Pierre-Etienne MACCHI",
                                    "firstName": "Pierre-Etienne",
                                    "familyName": "Macchi",
                                    "affiliation": "CC-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "macchi@in2p3.fr"
                                }
                            ],
                            "sessionId": "0",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t77",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=77&sessionId=0",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s0c83": {
                            "startDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "15:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "15:35:00"
                            },
                            "description": "",
                            "title": "Mot de la direction LPC",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/0\/contribution\/83",
                            "id": "s0c83",
                            "contributionId": "83",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dominique PALLIN",
                                    "firstName": "Dominique",
                                    "familyName": "PALLIN",
                                    "affiliation": "LPC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "dominique.pallin@cern.ch"
                                }
                            ],
                            "sessionId": "0",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t83",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=83&sessionId=0",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s0c82": {
                            "startDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "16:45:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-26",
                                "tz": "Europe\/Paris",
                                "time": "17:05:00"
                            },
                            "description": "Cette pr\u00e9sentation sera scind\u00e9e en 2 parties, elle pourra donner lieu \u00e0 une discussion dans le cadre m\u00eame de ces JI2016, l'id\u00e9e \u00e9tant, bien \u00e9videmment, de renforcer les liens des 2 r\u00e9seaux Instrumentation de l'IN2P3 proches de la th\u00e9matique \"Online\" avec le r\u00e9seau RI3, r\u00e9seau des informaticiens et de collaborer \u00e0 la fronti\u00e8re entre informatique et \u00e9lectronique. \r\n\r\nDans le cadre des activit\u00e9s du r\u00e9seau DAQ, un certain nombre de solutions communes sont en cours de d\u00e9finition tant au plan mat\u00e9riel que logiciel. L'objectif est de disposer d'un tronc commun modifiable par chaque d\u00e9veloppeur selon le contexte de son projet, et de fa\u00e7on \u00e0 acc\u00e9l\u00e9rer son propre d\u00e9veloppement. L'objectif affich\u00e9 du travail au sein du r\u00e9seau DAQ consiste \u00e0 \u00e9laguer le champs des possibilit\u00e9s pour aboutir \u00e0 un ensemble plus facile \u00e0 g\u00e9rer par une communaut\u00e9. \r\n\r\nLe r\u00e9seau Slow Control cherche \u00e0 identifier des points communs dans l\u2019approche et la conception d\u2019un syst\u00e8me de contr\u00f4le-commande au sein de l'Institut afin d'\u00e9laborer une sorte de r\u00e9f\u00e9rentiel IN2P3. M\u00eame si il existe clairement deux sch\u00e9mas d\u2019int\u00e9gration et de d\u00e9veloppement du contr\u00f4le-commande, l'objectif est de travailler sur une ou plusieurs probl\u00e9matiques communes tout en s'int\u00e9ressant \u00e0 ce qui se fait \u00e0 l'ext\u00e9rieur.",
                            "title": "Activit\u00e9s des r\u00e9seaux Instrumentation : DAQ & Slow Control",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/0\/contribution\/82",
                            "id": "s0c82",
                            "contributionId": "82",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Pierre-Yves DUVAL",
                                    "firstName": "Pierre-Yves",
                                    "familyName": "Duval",
                                    "affiliation": "CPPM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "duval@cppm.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Eric CHABANNE",
                                    "firstName": "Eric",
                                    "familyName": "Chabanne",
                                    "affiliation": "LAPP\/service electronique",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "chabanne@lapp.in2p3.fr"
                                }
                            ],
                            "sessionId": "0",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t82",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=82&sessionId=0",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/0\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "0",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=0&slotId=0"
                },
                "s13l0": {
                    "startDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "18:05:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "19:00:00"
                    },
                    "color": "#d0c296",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 55,
                    "id": "s13l0",
                    "inheritRoom": true,
                    "title": "Piscine num\u00e9rique",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s13",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#000000",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/13\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "13",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=13&slotId=0"
                },
                "b22": {
                    "startDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "14:45:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "15:15:00"
                    },
                    "description": "",
                    "title": "Accueil",
                    "color": "#FFEC1F",
                    "id": "b22",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 30,
                    "sessionCode": null,
                    "textColor": "#1F1D04",
                    "entryType": "Break",
                    "room": ""
                },
                "b6": {
                    "startDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "20:00:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-26",
                        "tz": "Europe\/Paris",
                        "time": "22:00:00"
                    },
                    "description": "",
                    "title": "Repas",
                    "color": "#4F144E",
                    "id": "b6",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 120,
                    "sessionCode": null,
                    "textColor": "#FFEFFF",
                    "entryType": "Break",
                    "room": ""
                }
            },
            "20160927": {
                "s17l1": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "14:00:00"
                    },
                    "sessionSlotId": "1",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "15:20:00"
                    },
                    "color": "#DFDFDF",
                    "conferenceId": "12779",
                    "slotTitle": "2",
                    "duration": 80,
                    "id": "s17l1",
                    "inheritRoom": false,
                    "title": "Offline",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s17",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#151515",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s17c78": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "15:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "15:20:00"
                            },
                            "description": "Je r\u00e9capitulerai sommairemment les diff\u00e9rentes technologies mise en \u0153uvre (OpenMP, C++'11 & HPX, MPI, OpenCL, DSL-Python) lors de cette \u00e9cole notamment au niveau des r\u00e9sultats et de l'impact sur le code initial ainsi que les pr\u00e9sentations qui n'ont pas d\u00e9bouch\u00e9 sur une impl\u00e9mentation (comme OpenCL pour FPGA). On fera notamment le lien avec la programmation fonctionnelle dont il a \u00e9t\u00e9 question lors de la pr\u00e9c\u00e9dente sessio (JI 2014).",
                            "title": "Compte-rendu de l'\u00e9cole informatique IN2P3 \u00ab Parall\u00e9lisme sur Mat\u00e9riel H\u00e9t\u00e9rog\u00e8ne \u00bb (23-27 mai 2016)",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/78",
                            "id": "s17c78",
                            "contributionId": "78",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Vincent LAFAGE",
                                    "firstName": "Vincent",
                                    "familyName": "LAFAGE",
                                    "affiliation": "CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "lafage@ipno.in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t78",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=78&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c58": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "14:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "14:40:00"
                            },
                            "description": "Les mod\u00e8les de calcul des exp\u00e9riences du LHC ont \u00e9t\u00e9 mis en place autour de la cr\u00e9ation d'une grille de calcul et de stockage mondiale dans les ann\u00e9es 2000. Cette infrastructure distribu\u00e9e a parfaitement rempli son r\u00f4le et a \u00e9t\u00e9 l'un des ingr\u00e9dients ind\u00e9niables des avanc\u00e9es scientifiques obtenues au LHC depuis son d\u00e9marrage en 2009. Fortes de l'exp\u00e9rience gagn\u00e9e lors des premi\u00e8res ann\u00e9es de fonctionnement de cette grille, les exp\u00e9riences du LHC modifient leurs mod\u00e8les de calcul pour gagner en efficacit\u00e9 et en souplesse dans le but notamment d'int\u00e9grer des ressources \"hors grille\" afin d'anticiper le d\u00e9luge de donn\u00e9es du LHC. Dans cette pr\u00e9sentation, nous d\u00e9crirons l'infrastructure de ce syst\u00e8me distribu\u00e9 et les mod\u00e8les mis en place par les exp\u00e9riences, la contribution fran\u00e7aise au calcul pour le LHC et les \u00e9volutions r\u00e9centes des mod\u00e8les de calcul. Quelques mots sur les challenges qui nous attendent \u00e0 plus long terme concluront cette pr\u00e9sentation.",
                            "title": "Evolution des mod\u00e8les de calcul au LHC",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/58",
                            "id": "s17c58",
                            "contributionId": "58",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Catherine BISCARAT",
                                    "firstName": "Catherine",
                                    "familyName": "Biscarat",
                                    "affiliation": "LPSC\/IN2P3\/CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "biscarat@in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t58",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=58&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c30": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "14:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "14:20:00"
                            },
                            "description": "L'exp\u00e9rience CTA sera le plus grand observatoire d'astronomie gamma au monde. Elle produira un flux de donn\u00e9es 1000 fois plus important que l'exp\u00e9rience pr\u00e9c\u00e9dente H.E.S.S. Les performances des codes d'analyse existants ne permettent pas de soutenir le traitement d'une telle quantit\u00e9 de donn\u00e9es.\r\n\r\nNous pr\u00e9senterons les diff\u00e9rentes techniques d'optimisation qui viennent de l'informatique hautes performances que nous mettons en \u0153uvre dans nos codes d'analyse. Ceci afin de garantir une utilisation du CPU de 99% au lieu des 2 \u00e0 5% actuels.",
                            "title": "Comment optimiser l'utilisation du CPU",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/30",
                            "id": "s17c30",
                            "contributionId": "30",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Pierre AUBERT",
                                    "firstName": "Pierre",
                                    "familyName": "Aubert",
                                    "affiliation": "LAPP",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "pierre.aubert@lapp.in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t30",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=30&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c28": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "14:40:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "15:00:00"
                            },
                            "description": "Dans cette pr\u00e9sentation, je vous d\u00e9crierai les besoins de l'exp\u00e9rience WA105, la configuration technique de tests (1 client \u00e9quip\u00e9 de 2 cartes 40gb\/s, 9 \u00e9l\u00e9ments de stockage \u00e0 10gb\/s chacun),  les choix initiaux des syst\u00e8mes de fichiers distribu\u00e9s que nous testerons (Lustre, BeeGFS, GPFS, Xtremefs, GlusterFS, MooseFS, XrootD, EOS...) mais aussi les tests r\u00e9alis\u00e9s pour chacun avec les d\u00e9bits observ\u00e9s en fonction du nombre d\u2019\u00e9l\u00e9ments de stockage (1, 2, 4, 8...), de la taille des fichiers (100Mo, 1Go, 10Go, 20Go) mais aussi en fonction du nombre de processus simultan\u00e9s en \u00e9criture (1,6,8). Je vous monterai ensuite les d\u00e9bit attendus et pr\u00e9sents, ainsi que les r\u00e9sultats pour chacun des tests r\u00e9alis\u00e9s. Je conclurai alors avec les pr\u00e9conisations adapt\u00e9es \u00e0 ce cas pr\u00e9cis.",
                            "title": "Comparatif des syst\u00e8mes de stockage distribu\u00e9s dans le cas d'\u00e9critures intensives",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/28",
                            "id": "s17c28",
                            "contributionId": "28",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Denis PUGNERE",
                                    "firstName": "Denis",
                                    "familyName": "PUGNERE",
                                    "affiliation": "IPNL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "d.pugnere@ipnl.in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t28",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=28&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/?slotId=1",
                    "isPoster": false,
                    "sessionId": "17",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=17&slotId=1"
                },
                "s12l1": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "16:10:00"
                    },
                    "sessionSlotId": "1",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "16:50:00"
                    },
                    "color": "#DFE555",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 40,
                    "id": "s12l1",
                    "inheritRoom": true,
                    "title": "Outils collaboratifs",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s12",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#202020",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s12c17": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "16:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "16:50:00"
                            },
                            "description": "Le projet PLUME (https:\/\/www.projet-plume.org) a  connu un franc succ\u00e8s comme r\u00e9f\u00e9rentiel des logiciels utilis\u00e9s et produits dans l'enseignements sup\u00e9rieur et de la recherche en France. Apr\u00e8s une coupure drastique des moyens en 2013, le projet a \u00e9t\u00e9 mis en sommeil jusqu'\u00e0 la reprise par Resinfo d\u00e9but 2016.\r\nUn groupe de travail a cr\u00e9\u00e9 pour donner une nouvelle mouture au projet, que nous pr\u00e9senterons \u00e0 la communaut\u00e9 RI3 lors de ses JI.",
                            "title": "Apr\u00e8s PLUME : FENIX",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/12\/contribution\/17",
                            "id": "s12c17",
                            "contributionId": "17",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mrs. Sophie NICOUD",
                                    "firstName": "Sophie",
                                    "familyName": "Nicoud",
                                    "affiliation": "CNRS LIRMM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "sophie.nicoud@lirmm.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Laurent P\u00c9ROCHON",
                                    "firstName": "Laurent",
                                    "familyName": "P\u00e9rochon",
                                    "affiliation": "VetAgro-Sup",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "laurent.perochon@vetagro-sup.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Dirk HOFFMANN",
                                    "firstName": "Dirk",
                                    "familyName": "Hoffmann",
                                    "affiliation": "Centre de Physique des Particules de Marseille",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "hoffmann@cppm.in2p3.fr"
                                }
                            ],
                            "sessionId": "12",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t17",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=17&sessionId=12",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s12c13": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "16:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "16:30:00"
                            },
                            "description": "Afin de faire \u00e9voluer la gestion documentaire dans l\u2019Institut, la direction adjointe technique de l\u2019IN2P3 a souhait\u00e9 mettre en place un nouvel espace collaboratif pour la gestion \u00e9lectronique des documents. Atrium permet notamment d\u2019assurer la p\u00e9rennit\u00e9 de vos documents tout en vous proposant une interface intuitive. \r\n\r\nR\u00e9alis\u00e9e en \u00e9troite collaboration avec les experts des laboratoires, la migration d\u2019EDMS vers Atrium est finalis\u00e9e depuis mars 2016. Atrium est bas\u00e9 sur l\u2019outil de gestion documentaire Nuxeo (plateforme Open Source). La Cellule IAO\/CAO de l\u2019IN2P3 et l'Equipe Projet Atrium assurent le support aux utilisateurs dans la phase d\u2019exploitation de ce portail documentaire. \r\n\r\nAtrium a pour but d\u2019\u00eatre utilis\u00e9 par tous. Son ergonomie, sa simplicit\u00e9 d\u2019utilisation et la richesse de ses fonctionnalit\u00e9s apportent une r\u00e9elle am\u00e9lioration de la production et de la gestion documentaire dans les laboratoires. Atrium offre \u00e9galement la possibilit\u00e9 \u00e0 tout agent de l\u2019Institut de g\u00e9rer ses propres documents dans un espace personnel limit\u00e9 par des quotas. Atrium a pour ambition d\u2019occuper, \u00e0 terme, la place centrale dans la gestion documentaire de l\u2019Institut.",
                            "title": "Atrium",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/12\/contribution\/13",
                            "id": "s12c13",
                            "contributionId": "13",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Mathieu WALTER",
                                    "firstName": "Mathieu",
                                    "familyName": "WALTER",
                                    "affiliation": "Services centraux IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "mathieu.walter@in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Alexandre PERRIER",
                                    "firstName": "Alexandre",
                                    "familyName": "Perrier",
                                    "affiliation": "IAO\/CAO",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "alexandre.perrier@in2p3.fr"
                                }
                            ],
                            "sessionId": "12",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t13",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=13&sessionId=12",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/12\/?slotId=1",
                    "isPoster": false,
                    "sessionId": "12",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=12&slotId=1"
                },
                "s17l0": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "color": "#DFDFDF",
                    "conferenceId": "12779",
                    "slotTitle": "1",
                    "duration": 90,
                    "id": "s17l0",
                    "inheritRoom": true,
                    "title": "Offline",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s17",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#151515",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s17c16": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "11:40:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:00:00"
                            },
                            "description": "L'Observatoire Virtuel a pour but de d\u00e9finir des standards d'interop\u00e9rabilit\u00e9 qui permettront d'acc\u00e9der et de travailler sur des donn\u00e9es observ\u00e9es ou simul\u00e9es.\r\n\r\nCette pr\u00e9sentation fera le point sur la r\u00e9flexion actuelle qui est faite autour du mod\u00e8le de donn\u00e9es Prov-DM qui a pour but de d\u00e9crire la provenance des donn\u00e9es fournies.  L'illustration sera faite autour de 2 cas d'utilisation : CTA (Cherenkov Telescope Array : projet europ\u00e9en de grand r\u00e9seau de t\u00e9lescopes Cherenkov de nouvelle g\u00e9n\u00e9ration en astronomie gamma des tr\u00e8s hautes \u00e9nergies) et Pollux (base de donn\u00e9es de spectres synth\u00e9tiques).",
                            "title": "Observatoire Virtuel : Provenance des donn\u00e9es",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/16",
                            "id": "s17c16",
                            "contributionId": "16",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mrs. Mich\u00e8le SANGUILLON",
                                    "firstName": "Mich\u00e8le",
                                    "familyName": "Sanguillon",
                                    "affiliation": "LUPM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "michele.sanguillon@univ-montp2.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t16",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=16&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c25": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "11:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "11:20:00"
                            },
                            "description": "Le framework de d\u00e9veloppement d'application web DJANGO (Python) est utilis\u00e9 pour l'impl\u00e9mentation d'une base de donn\u00e9es de simulations num\u00e9riques en astrophysique, appel\u00e9e CoastDB (online). Le mod\u00e8le de donn\u00e9es suit fid\u00e8lement le standard SimDM de l'observatoire virtuel international (IVOA). Le syst\u00e8me d'ORM de DJANGO calque ce mod\u00e8le de donn\u00e9es dans une base MySQL.\r\n\r\nLe remplissage de cette base de donn\u00e9es est facilit\u00e9 par une interface graphique Horus (offline), impl\u00e9ment\u00e9e en PyQt4 (binding Python \u00e0 la librairie Qt4), et qui permet d'exporter des donn\u00e9es r\u00e9duites issues des simulations num\u00e9riques r\u00e9alis\u00e9es par les astrophysiciens directement dans un format t\u00e9l\u00e9chargeable sur l'application web CoastDB.",
                            "title": "DJANGO et PyQt4 : technologies Python pour la r\u00e9alisation d'une base de donn\u00e9es de simulations num\u00e9riques en astrophysique",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/25",
                            "id": "s17c25",
                            "contributionId": "25",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Damien CHAPON",
                                    "firstName": "Damien",
                                    "familyName": "CHAPON",
                                    "affiliation": "CEA",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "damien.chapon@cea.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t25",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=25&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c11": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "11:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "11:40:00"
                            },
                            "description": "L\u2019IN2P3 participe activement \u00e0 plusieurs volets du projet Large Synoptic Survey Telescope (LSST). Actuellement en cours de construction, ce grand instrument est con\u00e7u pour effectuer le relev\u00e9 des objets c\u00e9lestes le plus complet jamais entrepris. \r\n\r\nUne cam\u00e9ra num\u00e9rique de 3.2 Gigapixels install\u00e9e dans un t\u00e9lescope de 8.4m de diam\u00e8tre localis\u00e9 au Chili permettra de capturer des images \u00e0 tr\u00e8s haute r\u00e9solution du ciel observable depuis l\u2019h\u00e9misph\u00e8re sud. L\u2019ensemble du ciel sera num\u00e9ris\u00e9 toutes les 4 nuits. Des processus automatis\u00e9s de d\u00e9tection et de caract\u00e9risation des objets c\u00e9lestes permettront de constituer un catalogue astronomique qui sera progressivement raffin\u00e9, \u00e0 partir du d\u00e9but des op\u00e9rations programm\u00e9 pour l\u2019ann\u00e9e 2022. \r\n\r\nLes images et le catalogue produits par l\u2019instrument seront mis \u00e0 disposition des chercheurs et permettront de couvrir un champ large de l\u2019astrophysique\u00a0: de la recherche sur le syst\u00e8me solaire \u00e0 la cosmologie. Au bout des dix ans du programme, le LSST aura permis de r\u00e9aliser un film de l\u2019univers visible depuis l\u2019h\u00e9misph\u00e8re austral et d\u2019observer de fa\u00e7on instantan\u00e9e les changements dans le ciel. \r\n\r\nDans cette contribution nous pr\u00e9senterons une vue d\u2019ensemble du projet, de l\u2019acquisition des donn\u00e9es aux produits finaux, avec un accent sur le syst\u00e8me distribu\u00e9 de traitement de donn\u00e9es de LSST pour lequel le Centre de Calcul de l\u2019IN2P3 se pr\u00e9pare \u00e0 jouer un r\u00f4le central.",
                            "title": "LSST ou la num\u00e9risation de l\u2019Univers",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/11",
                            "id": "s17c11",
                            "contributionId": "11",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Fabio HERNANDEZ",
                                    "firstName": "Fabio",
                                    "familyName": "Hernandez",
                                    "affiliation": "CC-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "fabio@in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t11",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=11&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s17c45": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:20:00"
                            },
                            "description": "Une exp\u00e9rimentation est men\u00e9e dans l'environnement VirtualData\/OpenStack au LAL. \r\nPlusieurs caract\u00e9ristiques de cette technologie sont en cours d'\u00e9valuation:\r\n\r\n - mise en place d'une infrastructure Hadoop\/Spark\/scipy sur une cloud OpenStack\r\n - mesures de performance (configuration du cluster, suivi des facteurs d'\u00e9chelle)\r\n - apprentissage des modules fonctionnels de la plateforme Spark (Scala, Python)\r\n - exploitation des donn\u00e9es binaires structur\u00e9es dans Spark \u00e0 travers le module Hadoop\/avro\r\n - application aux fichiers FITS\r\n - quelques exemples de cas d'usage dans le contexte de l'exp\u00e9rience LSST\r\n\r\n**Christian Arnault**\r\n\r\nAxel Chevarin\r\n\r\nR\u00e9za Ansari\r\n\r\nJohann Cohen Tanoudji",
                            "title": "Utilisation d'une plateforme Hadoop\/Spark pour des donn\u00e9es astrophysiques",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/contribution\/45",
                            "id": "s17c45",
                            "contributionId": "45",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Christian ARNAULT",
                                    "firstName": "Christian",
                                    "familyName": "Arnault",
                                    "affiliation": "CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "arnault@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "17",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t45",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=45&sessionId=17",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/17\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "17",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=17&slotId=0"
                },
                "s2l5": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "16:50:00"
                    },
                    "sessionSlotId": "5",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "18:20:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "5",
                    "duration": 90,
                    "id": "s2l5",
                    "inheritRoom": false,
                    "title": "Atelier",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s2",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s2c80": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "16:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "18:20:00"
                            },
                            "description": "L'Arduino apporte de nouvelles possibilit\u00e9s pour instrumenter rapidement et \u00e9conomiquement de nouveaux \u00e9quipements. Nous nous proposons de mettre en \u0153uvre un exemple avec divers degr\u00e9s d'abstraction des interfaces.",
                            "title": "Une nouvelle passerelle entre l'instrumentation et l'informatique : l'Arduino",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/contribution\/80",
                            "id": "s2c80",
                            "contributionId": "80",
                            "sessionSlotId": "5",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Xavier GRAVE",
                                    "firstName": "Xavier",
                                    "familyName": "Grave",
                                    "affiliation": "CSNSM-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "xavier.grave@csnsm.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Nicolas DOSME",
                                    "firstName": "Nicolas",
                                    "familyName": "DOSME",
                                    "affiliation": "CSNSM",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "nicolas.dosme@csnsm.in2p3.fr"
                                }
                            ],
                            "sessionId": "2",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t80",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=80&sessionId=2",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/?slotId=5",
                    "isPoster": false,
                    "sessionId": "2",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=2&slotId=5"
                },
                "s16l1": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "08:50:00"
                    },
                    "sessionSlotId": "1",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "09:35:00"
                    },
                    "color": "#EEE0EF",
                    "conferenceId": "12779",
                    "slotTitle": "1",
                    "duration": 45,
                    "id": "s16l1",
                    "inheritRoom": true,
                    "title": "Eclair",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s16",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#1D041F",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 5,
                    "entries": {
                        "s16c29": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:15:00"
                            },
                            "description": "R\u00e9sum\u00e9: Nous avons adopt\u00e9 Symfony2 pour la refonte de 2 Applications Web en 2010. Six ans apr\u00e8s, nous pouvons \u00e9valuer les b\u00e9n\u00e9fices de ce framework pour faciliter l\u2019\u00e9volution des applications et le d\u00e9marrage de nouveaux projets.",
                            "title": "Bilan de l'utilisation du framework Symfony2 pour le d\u00e9veloppement  d'applications Web au LAL.",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/29",
                            "id": "s16c29",
                            "contributionId": "29",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Ms. Justine YUAN",
                                    "firstName": "Justine",
                                    "familyName": "YUAN",
                                    "affiliation": "LAL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "yuan@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t29",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=29&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c6": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:15:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:20:00"
                            },
                            "description": "LE CEA, traditionnellement tr\u00e8s ferm\u00e9, a mis en place ces derniers mois certains outils collaboratifs utilisables aussi par des collaborateurs non CEA.\r\n\r\nEn particulier, le CEA a install\u00e9 des serveurs Microsoft SharePoint 2013 sur un r\u00e9seau partag\u00e9, bas\u00e9 sur un Active Directory sp\u00e9cifique afin de cr\u00e9er des sites de partages de contenu, d'informations... ouvert \u00e0 des personnes non CEA.\r\n \r\nIl est en train aussi d'installer une forge pour le d\u00e9veloppement logiciel.",
                            "title": "Outils collaboratifs CEA",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/6",
                            "id": "s16c6",
                            "contributionId": "6",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. joel SURGET",
                                    "firstName": "joel",
                                    "familyName": "surget",
                                    "affiliation": "CEA\/Saclay IRFU",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "joel.surget@cea.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t6",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=6&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c24": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:05:00"
                            },
                            "description": "Le projet AERA de l'exp\u00e9rience AUGER, install\u00e9e dans la pampa argentine, consiste \u00e0 utiliser un r\u00e9seau de 160 antennes radio. Nous avons d\u00e9velopp\u00e9 une interface graphique permettant de surveiller l'\u00e9tat du r\u00e9seau, g\u00e9rer les runs et les logiciels d'acquisition ainsi que de commander les antennes. Sa sp\u00e9cificit\u00e9 est d'avoir \u00e9t\u00e9 impl\u00e9ment\u00e9e sur le Web.  Elle utilise les technologies AJAX \/ PHP et est actuellement en production.",
                            "title": "Interface Graphique Web de Contr\u00f4le Commande pour AERA \/ AUGER",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/24",
                            "id": "s16c24",
                            "contributionId": "24",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Fr\u00e9d\u00e9ric MELOT",
                                    "firstName": "Fr\u00e9d\u00e9ric",
                                    "familyName": "Melot",
                                    "affiliation": "LPSC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "melot@in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t24",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=24&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c31": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:35:00"
                            },
                            "description": "L'exp\u00e9rience CTA sera le plus grand observatoire d'astronomie gamma au monde. Elle produira un flux de donn\u00e9es 1000 fois plus important que l'exp\u00e9rience pr\u00e9c\u00e9dente H.E.S.S., soit 69 GO\/s qui devront \u00eatre transf\u00e9r\u00e9es vers les centres de calculs avec une ligne \u00e0 10 Gb\/s.\r\nUn d\u00e9fit majeur de cette exp\u00e9rience est la compression sans perte des donn\u00e9es brutes.\r\n\r\nNous pr\u00e9senterons une m\u00e9thode de compression innovante adapt\u00e9e aux signaux domin\u00e9s par un bruit gaussien.\r\nLes algorithmes utilis\u00e9s dans cette m\u00e9thode permettent une utilisation optimale du processeur afin de garantir un temps de compression et de d\u00e9compression meilleur que les m\u00e9thodes actuelles.",
                            "title": "M\u00e9thode de compression polynomiale",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/31",
                            "id": "s16c31",
                            "contributionId": "31",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Pierre AUBERT",
                                    "firstName": "Pierre",
                                    "familyName": "Aubert",
                                    "affiliation": "LAPP",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "pierre.aubert@lapp.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t31",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=31&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c49": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:05:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:10:00"
                            },
                            "description": "Vous connaissez tous gitlab.in2p3.fr, le clone de GitHub pour les collaborateurs des projets de d\u00e9veloppements de l'IN2P.\r\nAvec GitLab est fourni maintenant une fonctionnalit\u00e9 d'int\u00e9gration continue.\r\nCela permet d'ex\u00e9cuter de fa\u00e7on automatique des tests, des builds et des d\u00e9ploiements.\r\nCeci sera le teaser de la fonctionnalit\u00e9.",
                            "title": "GitLab CI",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/49",
                            "id": "s16c49",
                            "contributionId": "49",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Jean-Ren\u00e9 ROUET",
                                    "firstName": "Jean-Ren\u00e9",
                                    "familyName": "Rouet",
                                    "affiliation": "CC-IN2P3\/CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "rouet@in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t49",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=49&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c71": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:25:00"
                            },
                            "description": "Cette carte, dans son nouvel habit, se veut un outil interactif fournissant, de fa\u00e7on rapide et compr\u00e9hensible, les donn\u00e9es et caract\u00e9ristiques des faisceaux produits dans les installations du GANIL.  \r\n\r\nPr\u00e9sentation de l\u2019outil ;  Initi\u00e9e en 2006 avec les SHE, une premi\u00e8re version fait son apparition en 2011. En 2013, une version \u00ab Europ\u00e9enne \u00bb ChartECOS voit le jour. 2015 une nouvelle carte est propos\u00e9e \u00e0 la communaut\u00e9 avec int\u00e9gration des donn\u00e9es SPIRAL2.",
                            "title": "Chartbeams : une carte int\u00e9ractive des noyaux pour le GANIL",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/71",
                            "id": "s16c71",
                            "contributionId": "71",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Laurent FORTIN",
                                    "firstName": "Laurent",
                                    "familyName": "Fortin",
                                    "affiliation": "GANIL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "fortin@ganil.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t71",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=71&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c65": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "08:55:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:00:00"
                            },
                            "description": "Le r\u00e9seaux DevLOG organise la quatri\u00e8me \u00e9dition de la rencontre nationale biannuelle des d\u00e9veloppeurs de logiciels dans le domaine de l'Enseignement Sup\u00e9rieur et de la Recherche du mardi 4 au vendredi 7 juillet 2017 \u00e0 Marseille. Cet \u00e9v\u00e9nement a vu augmenter le nombre de ses participants d'\u00e9dition \u00e0 \u00e9dition. Plus de 500 personnes sont attendues \u00e0 Marseille l'ann\u00e9e prochaine. \r\nNous nous proposons de faire passer un bref message de la part du comit\u00e9 d'organisation sur l'\u00e9tait de l'organisation, les liens et attentes vis-\u00e0-vis du RI3 et l'\u00e9tat d'avancement du programme.",
                            "title": "Les rencontres jDev en 2017",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/65",
                            "id": "s16c65",
                            "contributionId": "65",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Dirk HOFFMANN",
                                    "firstName": "Dirk",
                                    "familyName": "Hoffmann",
                                    "affiliation": "Centre de Physique des Particules de Marseille",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "hoffmann@cppm.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t65",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=65&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c64": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "08:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "08:55:00"
                            },
                            "description": "L'outil Slack (slack.com) a r\u00e9cemment fait apparition sur nos radars. Il semble tr\u00e8s int\u00e9ressant, peut-\u00eatre qu'on pourrait m\u00eame l'exploiter \u00e0 titre d'essai \/ d'illustration. Dans ce cas, il faudrait pr\u00e9voir notre pr\u00e9sentation en d\u00e9but des JI pour expliquer comment cela marche (ji.slack.com). C'est un bon moyen pour impliquer les gens \u00e0 distance via un chat non-existant ; \u00e0 voir dans le contexte du webcast, selon s'il est possible ou pas. \r\nIl y a par ailleurs la collaboration IceCube qui l'utilise de mani\u00e8re professionnelle (c'est-\u00e0-dire ils ont pay\u00e9 le service am\u00e9lior\u00e9 de Slack) ; on essaiera d'en savoir plus. Il faut voir, si on peut \u00e9tablir un lien avec les pr\u00e9sentaitons \"outils collaboratifs\" du CEA et de LSST.",
                            "title": "Entre blog et IRC : Slack",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/64",
                            "id": "s16c64",
                            "contributionId": "64",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Jean-Paul LE F\u00c8VRE",
                                    "firstName": "Jean-Paul",
                                    "familyName": "Le F\u00e8vre",
                                    "affiliation": "CEA Irfu",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "jean-paul.lefevre@cea.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Dirk HOFFMANN",
                                    "firstName": "Dirk",
                                    "familyName": "Hoffmann",
                                    "affiliation": "Centre de Physique des Particules de Marseille",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "hoffmann@cppm.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t64",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=64&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c59": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:25:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:30:00"
                            },
                            "description": "Dans le cadre de la mise au point d'instruments pour guider le chirurgien en temps r\u00e9el dans la localisation et l\u2019ablation pr\u00e9cise des foyers tumoraux, une nouvelle g\u00e9n\u00e9ration de d\u00e9tecteurs per-op\u00e9ratoires bas\u00e9s sur la technologie des photomultiplicateurs silicium est en cours de d\u00e9veloppement. Au-del\u00e0 du syst\u00e8me de d\u00e9tection, la qualit\u00e9 des images obtenues d\u00e9pend fortement du choix de la m\u00e9thode de reconstruction de la position d\u2019interaction des particules dans le d\u00e9tecteur \u00e0 partir des caract\u00e9ristiques des signaux physiques g\u00e9n\u00e9r\u00e9s.\r\nOutre permettre de reconstruire les images avec une bonne r\u00e9solution et une faible distorsion, la m\u00e9thode retenue doit \u00eatre op\u00e9rationnelle pour un syst\u00e8me d\u2019imagerie temps r\u00e9el afin d'\u00eatre int\u00e9gr\u00e9e dans le logiciel d\u2019acquisition existant (Qt\/C++).\r\nNous avons men\u00e9 une \u00e9tude bas\u00e9e sur l'approche par r\u00e9seaux de neurones. Pour cela, une base de signaux d\u2019\u00e9v\u00e8nements de caract\u00e9ristiques connues a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9e afin d'apprendre au r\u00e9seau \u00e0 associer une position \u00e0 un signal donn\u00e9. Apr\u00e8s cette phase d'apprentissage, le r\u00e9seau est en mesure de g\u00e9n\u00e9raliser \u00e0 des signaux inconnus.\r\nNous proposons de pr\u00e9senter les outils d\u00e9velopp\u00e9s et test\u00e9s pour mener cette \u00e9tude ainsi que les principaux r\u00e9sultats obtenus en imagerie beta et gamma.",
                            "title": "D\u00e9veloppement et \u00e9valuation d\u2019une m\u00e9thode de reconstruction par r\u00e9seau de neurones pour l\u2019imagerie radio-isotopique",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/59",
                            "id": "s16c59",
                            "contributionId": "59",
                            "sessionSlotId": "1",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mrs. Fran\u00e7oise LEFEBVRE",
                                    "firstName": "Fran\u00e7oise",
                                    "familyName": "Lefebvre",
                                    "affiliation": "IMNC CNRS",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "lefebvre@imnc.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t59",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=59&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/?slotId=1",
                    "isPoster": false,
                    "sessionId": "16",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=16&slotId=1"
                },
                "s2l2": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "sessionSlotId": "2",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "2",
                    "duration": 90,
                    "id": "s2l2",
                    "inheritRoom": false,
                    "title": "Atelier",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s2",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s2c79": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "11:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:30:00"
                            },
                            "description": "Dans cet atelier vous \u00e9tudierez le format des adresses IPv6, les diff\u00e9rents types d'adresses (locales, globales...), les m\u00e9canismes de configuration d'IPv6. Vous verrez en pratique comment cela fonctionne gr\u00e2ce \u00e0 des machines et routeurs virtuels.",
                            "title": "Atelier IPV6",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/contribution\/79",
                            "id": "s2c79",
                            "contributionId": "79",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Laurent CAILLAT-VALLET",
                                    "firstName": "Laurent",
                                    "familyName": "Caillat-Vallet",
                                    "affiliation": "CC-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "caillat@cc.in2p3.fr"
                                }
                            ],
                            "sessionId": "2",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t79",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=79&sessionId=2",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/?slotId=2",
                    "isPoster": false,
                    "sessionId": "2",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=2&slotId=2"
                },
                "s1l0": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "08:50:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "10:30:00"
                    },
                    "color": "#92b6db",
                    "conferenceId": "12779",
                    "slotTitle": "1",
                    "duration": 100,
                    "id": "s1l0",
                    "inheritRoom": true,
                    "title": "ASR",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s1",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#03070F",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s1c35": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "08:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:10:00"
                            },
                            "description": "De plus en plus de laboratoires IN2P3\/IRFU se tournent vers Puppet pour la configuration de serveurs voire de postes de travail, surtout lorsqu'il s'agit de g\u00e9rer un ensemble de configurations relativement homog\u00e8nes (clusters de calcul et de stockage). All\u00e9ch\u00e9s par la promesse d'une large librairie de modules tout pr\u00eats, les ASR sont nombreux \u00e0 vouloir utiliser le produit.\r\n\r\nL'objectif de la pr\u00e9sentation est d'aider les ASR \u00e0 comprendre quel est l'\u00e9cosyst\u00e8me qu'il est souhaitable d'installer avec Puppet pour avoir une installation permettant de tirer profit des modules externes, mais \u00e9galement une installation \u00e9volutive et facile \u00e0 maintenir. A terme, l'ambition est de fournir un v\u00e9ritable \u00ab\u00a0Puppet starting kit\u00a0\u00bb pour partir du bon pied.\r\n\r\nCette pr\u00e9sentation fait \u00e9cho \u00e0 l'excellente formation qui s'est d\u00e9roul\u00e9e en novembre 2015 au CCIN2P3. Elle doit beaucoup aux conseils et la contribution de plusieurs experts de notre communaut\u00e9.",
                            "title": "Puppet: C'est vous qui tirez les ficelles!",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/35",
                            "id": "s1c35",
                            "contributionId": "35",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Jean-Michel BARBET",
                                    "firstName": "Jean-Michel",
                                    "familyName": "Barbet",
                                    "affiliation": "Subatech",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "jean-michel.barbet@subatech.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t35",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=35&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c9": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:30:00"
                            },
                            "description": "Redhat Cluster Suite (RHCS) permet de cr\u00e9er un cluster de virtualisation haute disponibilit\u00e9 (High Availability). A l'IPNO RHCS a \u00e9t\u00e9 d\u00e9ploy\u00e9 sur deux noeuds Dell R620 en mode actif-actif permettant la migration \u00e0 chaud des VM. Par ailleurs en cas de d\u00e9faillance d'un des deux noeuds, le noeud vivant red\u00e9marre automatiquement les VM du noeud absent. Les images des VM sont install\u00e9es sur des volumes LVM reposant sur DRBD (Distributed Replicated Block Device). DRBD assure la replication des blocs entre les deux noeuds via une liaison d\u00e9di\u00e9e 10Gb permettant ainsi un mirroring des donn\u00e9es sur les deux noeuds. DRBD \u00e9vite le recours \u00e0 un stockage de type SAN ou NFS pour stocker les images des VM. Les 14 VM g\u00e9r\u00e9es actuellement (des services de la grille de calcul) tournent sous KVM. Un m\u00e9canisme de fencing assure qu'une VM ne peux jamais \u00eatre d\u00e9marr\u00e9e en m\u00eame temps sur les deux noeuds en cas de perte de connectivit\u00e9 entre les deux neouds (split brain).\r\nLes scripts maison, les utilitaires et les images ISO sont sauv\u00e9es dans une partition GFS2 sous Clustered LVM au dessus de DRDB.\r\nLe cluster est en production depuis fin D\u00e9cembre 2014 sous Linux SL 6.5.",
                            "title": "Cluster de Virtualisation Haute Disponibilit\u00e9 avec Readhat Cluster Suite",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/9",
                            "id": "s1c9",
                            "contributionId": "9",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Christophe DIARRA",
                                    "firstName": "Christophe",
                                    "familyName": "DIARRA",
                                    "affiliation": "IPN ORSAY",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "diarra@ipno.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t9",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=9&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c10": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:50:00"
                            },
                            "description": "Afin de profiter de notre cluster de virtualisation, de faciliter le travail de l'\u00e9quipe support et de r\u00e9utilser de vieux portables, nous avons cr\u00e9\u00e9 un nouveau service au LAPP : \"Salle de TP virtuelle\".\r\nJe pr\u00e9senterai l'infrastructure mat\u00e9rielle, les solutions qui ont \u00e9t\u00e9 mises en place, puis je finirai par un petit bilan des premiers cas d'utilisation.",
                            "title": "Salle de TP Virtuelle",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/10",
                            "id": "s1c10",
                            "contributionId": "10",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "M. Philippe SERAPHIN",
                                    "firstName": "Philippe",
                                    "familyName": "SERAPHIN",
                                    "affiliation": "IN2P3\/LAPP",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "philippe.seraphin@lapp.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t10",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=10&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c22": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:30:00"
                            },
                            "description": "Jusqu\u2019\u00e0 pr\u00e9sent les comptes Unix et Windows \u00e9taient g\u00e9r\u00e9s respectivement via un annuaire NIS et Active Directory. \r\nCette double gestion nous imposait un workflow lourd (ouverture du compte sous unix puis ouverture ous Windows\/AD) \u00e0 la cr\u00e9ation des comptes et tout au long de la vie du compte. En pratique les comptes Unix n\u2019\u00e9taient pas g\u00e9r\u00e9s correctement. \r\nDe plus NIS \u00e9tant un service obsol\u00e8te et tr\u00e8s mauvais du point de vue de la  s\u00e9curit\u00e9 nous avons d\u00e9cid\u00e9 de ne plus avoir qu\u2019un seul syst\u00e8me de comptes sous Active Directory.\r\nPour r\u00e9aliser cela il a fallu r\u00e9aliser plusieurs choses :\r\n\u2022\tUnifier les comptes Windows et Linux (login name, groupes, appartenance aux groupes, \u2026) existants.\r\n\u2022\tG\u00e9rer l\u2019ensemble des informations NIS sous Active directory : les maps pour le montage des espaces NFS et l\u2019ensemble des attributs UNIX (uid, gid, shell, rep. home)\r\n\u2022\tMigrer l\u2019authentification de l\u2019ensemble des services Linux de NIS vers LDAP\/Kerberos  d\u2019Active Directory (mail, serveurs interactifs, GLPI, web, svn, Owncloud, \u2026)\r\n\u2022\tD\u00e9velopper une application web de gestion des comptes qui alimente l\u2019annuaire LDAP d\u2019AD\r\n\r\nLe projet a \u00e9t\u00e9 men\u00e9 par un ing\u00e9nieur syst\u00e8me Linux (qui a travaill\u00e9 sur AD comme sur il l\u2019aurait fait sur un annuaire LDAP \u00ab classique \u00bb) et par un ing\u00e9nieur syst\u00e8me alternant qui a d\u00e9velopp\u00e9 l\u2019application web (UTENTOMATIC).",
                            "title": "Migration de NIS vers Active Directory",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/22",
                            "id": "s1c22",
                            "contributionId": "22",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Val\u00e9rie GIVAUDAN",
                                    "firstName": "Val\u00e9rie",
                                    "familyName": "Givaudan",
                                    "affiliation": "LAL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "givaudan@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t22",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=22&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s1c12": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:10:00"
                            },
                            "description": "Pr\u00e9sentation de la nouvelle plateforme d'annuaire mise en place \u00e0 l'IRFU.\r\nCette solution permet de r\u00e9pondre aux probl\u00e9matiques de l\u2019ancienne infrastructure bas\u00e9e sur NIS :\r\n- Centralisation des donn\u00e9es (un seul \"cluster\" d'annauire).\r\n- S\u00e9curisation des donn\u00e9es (SSL\/TLS).\r\n- Mot de passe unique (Windows\/Linux).\r\n- Syst\u00e8me redondant (4 serveurs\/VMs).",
                            "title": "Integration d'Openldap et d'Active Directory",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/12",
                            "id": "s1c12",
                            "contributionId": "12",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. anthony GAUTIER",
                                    "firstName": "anthony",
                                    "familyName": "gautier",
                                    "affiliation": "CEA\/irfu",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "anthony.gautier-de-lahaut@cea.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t12",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=12&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "1",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=1&slotId=0"
                },
                "s1l2": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "15:20:00"
                    },
                    "sessionSlotId": "2",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "15:40:00"
                    },
                    "color": "#92b6db",
                    "conferenceId": "12779",
                    "slotTitle": "2",
                    "duration": 20,
                    "id": "s1l2",
                    "inheritRoom": true,
                    "title": "ASR",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s1",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#03070F",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {
                        "s1c52": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "15:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "15:40:00"
                            },
                            "description": "Dans le cadre de son programme bachelor, l'\u00e9cole Polytechnique va construire de nouveaux logements pour ses \u00e9l\u00e9ves.\r\nSuite \u00e0 une rencontre avec la soci\u00e9t\u00e9 QARNOT, elle envisage de les  chauffer avec des radiateurs\/ordinateurs.\r\n\r\nle mod\u00e8le de Qarnot est :\r\n  La soci\u00e9t\u00e9 fournit le radiateur et paye la consomation \u00e9lectrique des organismes qui acceptent\r\nd'h\u00e9berger ces radiateurs\r\n  La soci\u00e9t\u00e9 vend  la puissance CPU fournie  par ces radiateurs. Les applications doivent \u00eatre en  docker\r\n\r\nJ'ai essay\u00e9 de mesurer, du point de vue financier, la  possibilit\u00e9 d'utiliser ces CPU.\r\n\r\n3 sc\u00e9narios :\r\n* acheter les radiateurs et les utiliser comme des noeuds de calcul\r\n* ne pas utiliser ces CPU .\r\n* utiliser le cloud de Carnot\r\n\r\nA ce jour, nous n'avons fait aucun test d'utilisation  de ce hardware. Nous avons demand\u00e9 \u00e0 la soci\u00e9t\u00e9 de nous pr\u00e9ter un radiateur, mais nous ne l'avons pas encore recu.\r\n\r\nPascale",
                            "title": "Utiliser des radiateurs pour calculer?",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/contribution\/52",
                            "id": "s1c52",
                            "contributionId": "52",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mrs. Pascale HENNION",
                                    "firstName": "Pascale",
                                    "familyName": "Hennion",
                                    "affiliation": "LLR",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "hennion@llr.in2p3.fr"
                                }
                            ],
                            "sessionId": "1",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t52",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=52&sessionId=1",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/1\/?slotId=2",
                    "isPoster": false,
                    "sessionId": "1",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=1&slotId=2"
                },
                "s2l4": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "16:50:00"
                    },
                    "sessionSlotId": "4",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "18:20:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "4",
                    "duration": 90,
                    "id": "s2l4",
                    "inheritRoom": false,
                    "title": "Atelier",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s2",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s2c15": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "16:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "18:20:00"
                            },
                            "description": "Atelier Atrium : \r\n\r\nTout en assurant une continuit\u00e9 de service par rapport \u00e0 l\u2019outil EDMS, Atrium se pr\u00e9sente r\u00e9solument comme une application moderne alliant la puissance de ses concepts \u00e0 une ergonomie intuitive, exclusivement bas\u00e9e sur une interface Web, que ce soit pour l\u2018utilisation quotidienne ou pour les fonctions d\u2019administration. Cet atelier interactif vous permettra de d\u00e9couvrir Atrium et de vous familiariser avec les fonctionnalit\u00e9s essentielles et avanc\u00e9es de la plateforme. Nous pourrons \u00e9galement \u00e9tudier vos besoins et vous proposer des solutions avec Atrium.",
                            "title": "Atelier Atrium",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/contribution\/15",
                            "id": "s2c15",
                            "contributionId": "15",
                            "sessionSlotId": "4",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Cedric MULLER",
                                    "firstName": "Cedric",
                                    "familyName": "MULLER",
                                    "affiliation": "IPHC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "cedric.muller@iphc.cnrs.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Mathieu WALTER",
                                    "firstName": "Mathieu",
                                    "familyName": "WALTER",
                                    "affiliation": "Services centraux IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "mathieu.walter@in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Alexandre PERRIER",
                                    "firstName": "Alexandre",
                                    "familyName": "Perrier",
                                    "affiliation": "IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": ""
                                }
                            ],
                            "sessionId": "2",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t15",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=15&sessionId=2",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/?slotId=4",
                    "isPoster": false,
                    "sessionId": "2",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=2&slotId=4"
                },
                "s14l1": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "15:40:00"
                    },
                    "sessionSlotId": "1",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "16:10:00"
                    },
                    "color": "#FFEC1F",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 30,
                    "id": "s14l1",
                    "inheritRoom": true,
                    "title": "Pause",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s14",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#1F1D04",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 20,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/14\/?slotId=1",
                    "isPoster": false,
                    "sessionId": "14",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=14&slotId=1"
                },
                "s2l3": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "16:50:00"
                    },
                    "sessionSlotId": "3",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "18:20:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "3",
                    "duration": 90,
                    "id": "s2l3",
                    "inheritRoom": false,
                    "title": "Atelier",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s2",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s2c33": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "16:50:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "18:20:00"
                            },
                            "description": "Cet Atelier formera les heureux participants aux concepts de base de la programmation concurrente, en `Go`.\r\n\r\nNous commencerons avec un petit `\"Hello` `World\"` en `Go` pour rapidement introduire la syntaxe des fonctions, variables, `packages` et `interfaces`.\r\nPuis nous etudierons les deux outils disponibles pour organiser et orchestrer un programme concurrent en `Go`: les `channels` et les `goroutines`.\r\n\r\nCette introduction a la programmation concurrente se fera _via_ l'implementation d'une application _peer-to-peer_ echangeant des messages pur texte a travers le reseau.\r\nLa premiere mouture de cette application se fera en mode console, puis au fur et a mesure des ameliorations apportees au cours de l'atelier, la derniere version tournera dans un navigateur et permettra une utilisation en mode _\"tchat\"_.",
                            "title": "Atelier: Programmation concurrente en Go",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/contribution\/33",
                            "id": "s2c33",
                            "contributionId": "33",
                            "sessionSlotId": "3",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Dr. Sebastien BINET",
                                    "firstName": "Sebastien",
                                    "familyName": "Binet",
                                    "affiliation": "LPC\/IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "sebastien.binet@cern.ch"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Thomas BELLEMBOIS",
                                    "firstName": "Thomas",
                                    "familyName": "Bellembois",
                                    "affiliation": "LPC Clermont-Ferrand",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "thomas.bellembois@clermont.in2p3.fr"
                                }
                            ],
                            "sessionId": "2",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t33",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=33&sessionId=2",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/?slotId=3",
                    "isPoster": false,
                    "sessionId": "2",
                    "inheritLoc": false,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=2&slotId=3"
                },
                "s18l0": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "13:00:00"
                    },
                    "color": "#ecc495",
                    "conferenceId": "12779",
                    "slotTitle": "",
                    "duration": 30,
                    "id": "s18l0",
                    "inheritRoom": true,
                    "title": "Poster",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s18",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#1F1100",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 0,
                    "entries": {
                        "s18c75": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:50:00"
                            },
                            "description": "Cette carte, dans son nouvel habit, se veut un outil interactif fournissant, de fa\u00e7on rapide et compr\u00e9hensible, les donn\u00e9es et caract\u00e9ristiques des faisceaux produits dans les installations du GANIL.\r\n\r\nPr\u00e9sentation de l\u2019outil ; Initi\u00e9e en 2006 avec les SHE, une premi\u00e8re version fait son apparition en 2011. En 2013, une version \u00ab Europ\u00e9enne \u00bb ChartECOS voit le jour. 2015 une nouvelle carte est propos\u00e9e \u00e0 la communaut\u00e9 avec int\u00e9gration des donn\u00e9es SPIRAL2.",
                            "title": "Chartbeams : une carte int\u00e9ractive des noyaux pour le GANIL",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/18\/contribution\/75",
                            "id": "s18c75",
                            "contributionId": "75",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Laurent FORTIN",
                                    "firstName": "Laurent",
                                    "familyName": "Fortin",
                                    "affiliation": "GANIL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "fortin@ganil.fr"
                                }
                            ],
                            "sessionId": "18",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t75",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=75&sessionId=18",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s18c47": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:35:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:45:00"
                            },
                            "description": "Il sera question dans cette pr\u00e9sentation de faire un point sur la plateforme de messagerie Zimbra, sur son utilisation et sur les \u00e9volutions pr\u00e9vues.",
                            "title": "Plateforme Zimbra, statut et perspectives.",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/18\/contribution\/47",
                            "id": "s18c47",
                            "contributionId": "47",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Benoit DELAUNAY",
                                    "firstName": "Benoit",
                                    "familyName": "DELAUNAY",
                                    "affiliation": "Centre de Calcul de l'IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "delaunay@in2p3.fr"
                                }
                            ],
                            "sessionId": "18",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t47",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=47&sessionId=18",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s18c37": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:30:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:50:00"
                            },
                            "description": "poster en lien avec la pr\u00e9sentation de m\u00eame nom.",
                            "title": "Webinaires RI3: Le retour!",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/18\/contribution\/37",
                            "id": "s18c37",
                            "contributionId": "37",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Val\u00e9rie GIVAUDAN",
                                    "firstName": "Val\u00e9rie",
                                    "familyName": "Givaudan",
                                    "affiliation": "LAL",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "givaudan@lal.in2p3.fr"
                                }
                            ],
                            "sessionId": "18",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t37",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=37&sessionId=18",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/18\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "18",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=18&slotId=0"
                },
                "s2l0": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "12:30:00"
                    },
                    "color": "#D9DFC3",
                    "conferenceId": "12779",
                    "slotTitle": "1",
                    "duration": 90,
                    "id": "s2l0",
                    "inheritRoom": true,
                    "title": "Atelier",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s2",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#272F09",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {
                        "s2c60": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "11:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "12:30:00"
                            },
                            "description": "Cet atelier permettra aux participants dans une premi\u00e8re partie de mettre en \u00e9vidence des vuln\u00e9rabilit\u00e9s affectant un serveur Web classique .\r\n\r\n Seront \u00e9voqu\u00e9s alors : \r\n\r\n-\tLes probl\u00e8mes de configuration et leurs cons\u00e9quences : arborescence trop permissive, compromission de donn\u00e9es par \u00e9critures\r\n-\tLa r\u00e9sistance  aux intrusions par injection de code : injections SQL, injection syst\u00e8me\r\n-\tLes failles du type Cross-Site Scripting (XSS)\r\n\r\nUne seconde partie  sera consacr\u00e9e \u00e0 la s\u00e9curit\u00e9 de navigateurs courants. Les points abord\u00e9s seront :\r\n\r\n-\tCookies tra\u00e7ant (Third-party cookies)\r\n-\tTra\u00e7abilit\u00e9 du navigateur (fingerprinting)\r\n-\tD\u00e9tournement et vol de session\r\n\r\nCet atelier disposera de 5 \u00e0 6 machines clientes virtuelles, pouvant accueillir chacune un bin\u00f4me.\r\nLes participants devront simplement disposer d\u2019un pc portable \u00e9quip\u00e9 d\u2019un client SSH et d\u2019un serveur X .",
                            "title": "Atelier S\u00e9curit\u00e9",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/contribution\/60",
                            "id": "s2c60",
                            "contributionId": "60",
                            "sessionSlotId": "0",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Bernard BOUTHERIN",
                                    "firstName": "Bernard",
                                    "familyName": "Boutherin",
                                    "affiliation": "LPSC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "boutherin@lpsc.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Jean-Michel BARBET",
                                    "firstName": "Jean-Michel",
                                    "familyName": "Barbet",
                                    "affiliation": "Subatech",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "jean-michel.barbet@subatech.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Yoann KERMORVANT",
                                    "firstName": "Yoann",
                                    "familyName": "KERMORVANT",
                                    "affiliation": "LPC CAEN",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "kermorvant@lpccaen.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Fouad YAHIA",
                                    "firstName": "Fouad",
                                    "familyName": "Yahia",
                                    "affiliation": "I.P.N.Orsay",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "yahia@ipno.in2p3.fr"
                                },
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. david ZWOLINSKI",
                                    "firstName": "david",
                                    "familyName": "zwolinski",
                                    "affiliation": "cnrs",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "zwolinski@lpccaen.in2p3.fr"
                                }
                            ],
                            "sessionId": "2",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t60",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=60&sessionId=2",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/2\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "2",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=2&slotId=0"
                },
                "b11": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "20:00:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "22:00:00"
                    },
                    "description": "",
                    "title": "Repas",
                    "color": "#4F144E",
                    "id": "b11",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 120,
                    "sessionCode": null,
                    "textColor": "#FFEFFF",
                    "entryType": "Break",
                    "room": ""
                },
                "b2": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "10:30:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "11:00:00"
                    },
                    "description": "",
                    "title": "Pause",
                    "color": "#FFEC1F",
                    "id": "b2",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 30,
                    "sessionCode": null,
                    "textColor": "#1F1D04",
                    "entryType": "Break",
                    "room": ""
                },
                "s6l0": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "16:50:00"
                    },
                    "sessionSlotId": "0",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "18:20:00"
                    },
                    "color": "#6F390D",
                    "conferenceId": "12779",
                    "slotTitle": "1",
                    "duration": 90,
                    "id": "s6l0",
                    "inheritRoom": true,
                    "title": "Discussions",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s6",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#FFEDDF",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 90,
                    "entries": {},
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/6\/?slotId=0",
                    "isPoster": false,
                    "sessionId": "6",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=6&slotId=0"
                },
                "b5": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "13:00:00"
                    },
                    "_type": "BreakTimeSchEntry",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "14:00:00"
                    },
                    "description": "",
                    "title": "Repas",
                    "color": "#4F144E",
                    "id": "b5",
                    "sessionSlotId": null,
                    "conferenceId": "12779",
                    "_fossil": "breakTimeSchEntry",
                    "sessionId": null,
                    "location": "VVF Villages Le Grand Lioran",
                    "duration": 60,
                    "sessionCode": null,
                    "textColor": "#FFEFFF",
                    "entryType": "Break",
                    "room": ""
                },
                "s16l2": {
                    "startDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "09:50:00"
                    },
                    "sessionSlotId": "2",
                    "endDate": {
                        "date": "2016-09-27",
                        "tz": "Europe\/Paris",
                        "time": "10:30:00"
                    },
                    "color": "#EEE0EF",
                    "conferenceId": "12779",
                    "slotTitle": "2",
                    "duration": 40,
                    "id": "s16l2",
                    "inheritRoom": true,
                    "title": "Eclair",
                    "location": "VVF Villages Le Grand Lioran",
                    "uniqueId": "a12779s16",
                    "_fossil": "linkedTimeSchEntryDisplay",
                    "textColor": "#1D041F",
                    "_type": "LinkedTimeSchEntry",
                    "description": "",
                    "material": [],
                    "contribDuration": 5,
                    "entries": {
                        "s16c19": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:25:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:30:00"
                            },
                            "description": "La sauvegarde des donn\u00e9es stock\u00e9es localement sur nos postes clients est souvent sous-estim\u00e9e.\r\nCasse mat\u00e9rielle, suppression non souhait\u00e9e, vols, aucun utilisateur n'est \u00e0 l'abri d'une telle m\u00e9saventure.\r\nDe quelles solutions disposons nous pour nous pr\u00e9munir de la perte de telles donn\u00e9es ?\r\nComment s'\u00e9viter des proc\u00e9dures de restauration pouvant \u00eatre lourdes et co\u00fbteuses ?",
                            "title": "Sauvegarde des donn\u00e9es locales des postes clients",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/19",
                            "id": "s16c19",
                            "contributionId": "19",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Frederic GIRAULT",
                                    "firstName": "Frederic",
                                    "familyName": "GIRAULT",
                                    "affiliation": "LAPP Annecy",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "frederic.girault@lapp.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t19",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=19&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c38": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:10:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:15:00"
                            },
                            "description": "Pulp est le projet upstream de Red Hat Satellite 6 en mati\u00e8re de gestion de d\u00e9p\u00f4ts (RPM mais aussi modules Puppet, images Docker, ...). Rapide pr\u00e9sentation du nouveau compagnon de Puppet et Foreman dans le d\u00e9ploiement et la gestion de parcs Red Hat et d\u00e9riv\u00e9s.",
                            "title": "La gestion des d\u00e9p\u00f4ts RPM avec Pulp",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/38",
                            "id": "s16c38",
                            "contributionId": "38",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Nicolas FOURNIALS",
                                    "firstName": "Nicolas",
                                    "familyName": "Fournials",
                                    "affiliation": "CC-IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "nicolas.fournials@cc.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t38",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=38&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c34": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:20:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:25:00"
                            },
                            "description": "Au cours de cette pr\u00e9sentation j\u2019aborderai l\u2019installation de PNP4Nagios sous CentOs7 et Nagios Core 4 pour r\u00e9cup\u00e9rer les informations de performance des plugins Nagios, puis je d\u00e9taillerai la possibilit\u00e9 de visualiser ces informations par serveurs ou par services, ainsi que la cr\u00e9ation de vues sp\u00e9cifiques avec des donn\u00e9es issus du service de supervision de l\u2019IPHC.",
                            "title": "Retour d\u2019exp\u00e9rience de l\u2019utilisation du plugin pnp4nagios pour visualiser les donn\u00e9es de performances des sondes de Nagios.",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/34",
                            "id": "s16c34",
                            "contributionId": "34",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. sebastien GEIGER",
                                    "firstName": "sebastien",
                                    "familyName": "geiger",
                                    "affiliation": "IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "sebastien.geiger@iphc.cnrs.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t34",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=34&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c5": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:00:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:05:00"
                            },
                            "description": "Jusqu'a maintenant, le CEA utilisait des comptes CRU pour acc\u00e9der aux services Renater.\r\nLE CEA devrait enfin rentrer en partie dans la f\u00e9d\u00e9ration d'identit\u00e9 renater courant 2016.\r\n\r\nLa pr\u00e9sentation portera sur les choix du CEA et le basculement des comptes CRU en comptes standards.",
                            "title": "Le CEA dans la f\u00e9d\u00e9ration Renater",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/5",
                            "id": "s16c5",
                            "contributionId": "5",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. joel SURGET",
                                    "firstName": "joel",
                                    "familyName": "surget",
                                    "affiliation": "CEA\/Saclay IRFU",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "joel.surget@cea.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t5",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=5&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c76": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:05:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:10:00"
                            },
                            "description": "Depuis le d\u00e9but d'Agata, les donn\u00e9es de l'exp\u00e9rience \u00e9taient collect\u00e9es sur une baie de disques FC h\u00e9bergeant un syst\u00e8me de fichier GPFS. Le syst\u00e8me ayant \u00e9puis\u00e9 toutes les extensions de garantie possible, il \u00e9tait n\u00e9cessaire de trouver un rempla\u00e7ant.\r\nCo\u00fbt, performances, stabilit\u00e9, facilit\u00e9 de maintenance, Ceph pouvait-il r\u00e9pondre \u00e0 ces \u00e9l\u00e9ments dans le cadre d'un projet de recherche comme Agata?",
                            "title": "agata : de GPFS \u00e0 Ceph",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/76",
                            "id": "s16c76",
                            "contributionId": "76",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Yann AUBERT",
                                    "firstName": "Yann",
                                    "familyName": "Aubert",
                                    "affiliation": "IPNO",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "yann.aubert@ipno.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t76",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=76&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c55": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:15:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:20:00"
                            },
                            "description": "Summer est une infrastructure de stockage mutualis\u00e9 de l'UGA (Universit\u00e9 Grenoble Alpes) implant\u00e9e sur le domaine universitaire de Grenoble. 3 data center (primaire, r\u00e9plication et sauvegarde) bas\u00e9s sur une solution NetApp fournissent de la volum\u00e9trie aux divers laboratoires et services de l'UGA et \u00e9galement \u00e0 quelques structures ext\u00e9rieures (IUT, domaine de la sant\u00e9...). Le LPSC participe \u00e0 ce projet et a acquis une volum\u00e9trie de 60 TO sur cette plateforme, notamment pour les home directory des utilisateurs et la sauvegarde des datastore des machines virtuelles.",
                            "title": "Summer : Stockage mutualis\u00e9",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/55",
                            "id": "s16c55",
                            "contributionId": "55",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Pascal MEYRAND",
                                    "firstName": "Pascal",
                                    "familyName": "Meyrand",
                                    "affiliation": "LPSC \/ IN2P3",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "meyrand@lpsc.in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t55",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=55&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        },
                        "s16c44": {
                            "startDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "09:55:00"
                            },
                            "_type": "ContribSchEntry",
                            "material": [],
                            "endDate": {
                                "date": "2016-09-27",
                                "tz": "Europe\/Paris",
                                "time": "10:00:00"
                            },
                            "description": "Afin de diminuer les voyages couteux vers l'Argentine, le LPSC est en cours de pr\u00e9paration d'une salle de contr\u00f4le \u00e0 distance pour l'exp\u00e9rience AUGER.\r\nCette salle d\u00e9di\u00e9e sera \u00e9quip\u00e9e de trois ordinateurs et de 10 \u00e9crans et permettra de participer aux shifts de l'exp\u00e9rience \u00e0 distance.",
                            "title": "Control room pour AUGER",
                            "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/contribution\/44",
                            "id": "s16c44",
                            "contributionId": "44",
                            "sessionSlotId": "2",
                            "conferenceId": "12779",
                            "presenters": [
                                {
                                    "_type": "ContributionParticipation",
                                    "name": "Mr. Fr\u00e9d\u00e9ric MELOT",
                                    "firstName": "Fr\u00e9d\u00e9ric",
                                    "familyName": "Melot",
                                    "affiliation": "LPSC",
                                    "_fossil": "contributionParticipationTTDisplay",
                                    "email": "melot@in2p3.fr"
                                }
                            ],
                            "sessionId": "16",
                            "location": "VVF Villages Le Grand Lioran",
                            "uniqueId": "a12779t44",
                            "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?contribId=44&sessionId=16",
                            "_fossil": "contribSchEntryDisplay",
                            "sessionCode": "no code",
                            "entryType": "Contribution",
                            "room": ""
                        }
                    },
                    "sessionCode": "no code",
                    "conveners": [],
                    "entryType": "Session",
                    "room": "",
                    "url": "https:\/\/indico.in2p3.fr\/event\/12779\/session\/16\/?slotId=2",
                    "isPoster": false,
                    "sessionId": "16",
                    "inheritLoc": true,
                    "pdf": "https:\/\/indico.in2p3.fr\/event\/12779\/timetable\/timetable.pdf?sessionId=16&slotId=2"
                }
            }
        }
    }
}`
